{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"containerStyle\", \"wrapperStyle\", \"title\", \"price\", \"info\", \"button\", \"theme\", \"color\", \"titleStyle\", \"pricingStyle\", \"infoStyle\", \"onButtonPress\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { defaultTheme, normalizeText } from \"../helpers\";\nimport { fonts } from \"../helpers/index-config\";\nimport { Text } from \"../Text\";\nimport { PricingButton } from \"./components/PricingButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var PricingCard = function PricingCard(_ref) {\n  var _theme$colors, _theme$colors2, _theme$colors3;\n\n  var containerStyle = _ref.containerStyle,\n      wrapperStyle = _ref.wrapperStyle,\n      title = _ref.title,\n      price = _ref.price,\n      _ref$info = _ref.info,\n      info = _ref$info === void 0 ? [] : _ref$info,\n      button = _ref.button,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? theme == null ? void 0 : (_theme$colors = theme.colors) == null ? void 0 : _theme$colors.primary : _ref$color,\n      titleStyle = _ref.titleStyle,\n      pricingStyle = _ref.pricingStyle,\n      infoStyle = _ref.infoStyle,\n      onButtonPress = _ref.onButtonPress,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsx(View, _objectSpread(_objectSpread({}, rest), {}, {\n    style: StyleSheet.flatten([_objectSpread({\n      margin: 15,\n      marginBottom: 15,\n      backgroundColor: theme == null ? void 0 : (_theme$colors2 = theme.colors) == null ? void 0 : _theme$colors2.white,\n      borderWidth: 1,\n      padding: 15,\n      borderColor: theme == null ? void 0 : (_theme$colors3 = theme.colors) == null ? void 0 : _theme$colors3.grey5\n    }, Platform.select({\n      android: {\n        elevation: 1\n      },\n      default: {\n        shadowColor: 'rgba(0,0,0, .2)',\n        shadowOffset: {\n          height: 1,\n          width: 0\n        },\n        shadowOpacity: 0.5,\n        shadowRadius: 0.5\n      }\n    })), containerStyle && containerStyle]),\n    children: _jsxs(View, {\n      style: StyleSheet.flatten([styles.wrapper, wrapperStyle && wrapperStyle]),\n      children: [_jsx(Text, {\n        testID: \"pricingCardTitle\",\n        style: StyleSheet.flatten([styles.pricingTitle, titleStyle, {\n          color: color\n        }]),\n        children: title\n      }), _jsx(Text, {\n        style: StyleSheet.flatten([styles.pricingPrice, pricingStyle]),\n        children: price\n      }), info == null ? void 0 : info.map(function (item) {\n        var _theme$colors4;\n\n        return _jsx(Text, {\n          style: StyleSheet.flatten([_objectSpread({\n            textAlign: 'center',\n            marginTop: 5,\n            marginBottom: 5,\n            color: theme == null ? void 0 : (_theme$colors4 = theme.colors) == null ? void 0 : _theme$colors4.grey3\n          }, Platform.select({\n            android: _objectSpread({}, fonts.android.bold),\n            default: {\n              fontWeight: '600'\n            }\n          })), infoStyle]),\n          children: item\n        }, item);\n      }), React.isValidElement(button) ? button : _jsx(PricingButton, _objectSpread({\n        color: color,\n        onButtonPress: onButtonPress\n      }, button))]\n    })\n  }));\n};\nvar styles = StyleSheet.create({\n  wrapper: {\n    backgroundColor: 'transparent'\n  },\n  pricingTitle: _objectSpread({\n    textAlign: 'center',\n    fontSize: normalizeText(30)\n  }, Platform.select({\n    android: _objectSpread({}, fonts.android.black),\n    default: {\n      fontWeight: '800'\n    }\n  })),\n  pricingPrice: _objectSpread({\n    textAlign: 'center',\n    marginTop: 10,\n    marginBottom: 10,\n    fontSize: normalizeText(40)\n  }, Platform.select({\n    android: _objectSpread({}, fonts.android.bold),\n    default: {\n      fontWeight: '700'\n    }\n  }))\n});\nPricingCard.displayName = 'PricingCard';","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/base/dist/PricingCard/PricingCard.js"],"names":["React","defaultTheme","normalizeText","fonts","Text","PricingButton","PricingCard","containerStyle","wrapperStyle","title","price","info","button","theme","color","colors","primary","titleStyle","pricingStyle","infoStyle","onButtonPress","rest","StyleSheet","flatten","margin","marginBottom","backgroundColor","white","borderWidth","padding","borderColor","grey5","Platform","select","android","elevation","default","shadowColor","shadowOffset","height","width","shadowOpacity","shadowRadius","styles","wrapper","pricingTitle","pricingPrice","map","item","textAlign","marginTop","grey3","bold","fontWeight","isValidElement","create","fontSize","black","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Platform, StyleSheet, } from 'react-native';\nimport { defaultTheme, normalizeText } from '../helpers';\nimport { fonts } from '../helpers/index-config';\nimport { Text } from '../Text';\nimport { PricingButton } from './components/PricingButton';\nexport const PricingCard = ({ containerStyle, wrapperStyle, title, price, info = [], button, theme = defaultTheme, color = theme?.colors?.primary, titleStyle, pricingStyle, infoStyle, onButtonPress, ...rest }) => {\n    return (<View {...rest} style={StyleSheet.flatten([\n            {\n                margin: 15,\n                marginBottom: 15,\n                backgroundColor: theme?.colors?.white,\n                borderWidth: 1,\n                padding: 15,\n                borderColor: theme?.colors?.grey5,\n                ...Platform.select({\n                    android: {\n                        elevation: 1,\n                    },\n                    default: {\n                        shadowColor: 'rgba(0,0,0, .2)',\n                        shadowOffset: { height: 1, width: 0 },\n                        shadowOpacity: 0.5,\n                        shadowRadius: 0.5,\n                    },\n                }),\n            },\n            containerStyle && containerStyle,\n        ])}>\n      <View style={StyleSheet.flatten([\n            styles.wrapper,\n            wrapperStyle && wrapperStyle,\n        ])}>\n        <Text testID=\"pricingCardTitle\" style={StyleSheet.flatten([\n            styles.pricingTitle,\n            titleStyle,\n            { color },\n        ])}>\n          {title}\n        </Text>\n\n        <Text style={StyleSheet.flatten([styles.pricingPrice, pricingStyle])}>\n          {price}\n        </Text>\n\n        {info?.map((item) => (<Text key={item} style={StyleSheet.flatten([\n                {\n                    textAlign: 'center',\n                    marginTop: 5,\n                    marginBottom: 5,\n                    color: theme?.colors?.grey3,\n                    ...Platform.select({\n                        android: {\n                            ...fonts.android.bold,\n                        },\n                        default: {\n                            fontWeight: '600',\n                        },\n                    }),\n                },\n                infoStyle,\n            ])}>\n            {item}\n          </Text>))}\n\n        {React.isValidElement(button) ? (button) : (<PricingButton color={color} onButtonPress={onButtonPress} {...button}/>)}\n      </View>\n    </View>);\n};\nconst styles = StyleSheet.create({\n    wrapper: {\n        backgroundColor: 'transparent',\n    },\n    pricingTitle: {\n        textAlign: 'center',\n        fontSize: normalizeText(30),\n        ...Platform.select({\n            android: {\n                ...fonts.android.black,\n            },\n            default: {\n                fontWeight: '800',\n            },\n        }),\n    },\n    pricingPrice: {\n        textAlign: 'center',\n        marginTop: 10,\n        marginBottom: 10,\n        fontSize: normalizeText(40),\n        ...Platform.select({\n            android: {\n                ...fonts.android.bold,\n            },\n            default: {\n                fontWeight: '700',\n            },\n        }),\n    },\n});\nPricingCard.displayName = 'PricingCard';\n"]},"metadata":{},"sourceType":"module"}