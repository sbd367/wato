{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"backdropStyle\", \"overlayStyle\", \"onBackdropPress\", \"fullScreen\", \"ModalComponent\", \"isVisible\", \"pressableProps\", \"onPressOut\", \"onPressIn\", \"onLongPress\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Color from 'color';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var Overlay = function Overlay(_ref) {\n  var _theme$colors;\n\n  var children = _ref.children,\n      backdropStyle = _ref.backdropStyle,\n      overlayStyle = _ref.overlayStyle,\n      _ref$onBackdropPress = _ref.onBackdropPress,\n      onBackdropPress = _ref$onBackdropPress === void 0 ? function () {\n    return null;\n  } : _ref$onBackdropPress,\n      _ref$fullScreen = _ref.fullScreen,\n      fullScreen = _ref$fullScreen === void 0 ? false : _ref$fullScreen,\n      _ref$ModalComponent = _ref.ModalComponent,\n      ModalComponent = _ref$ModalComponent === void 0 ? Modal : _ref$ModalComponent,\n      isVisible = _ref.isVisible,\n      pressableProps = _ref.pressableProps,\n      onPressOut = _ref.onPressOut,\n      onPressIn = _ref.onPressIn,\n      onLongPress = _ref.onLongPress,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsxs(ModalComponent, _objectSpread(_objectSpread({\n    visible: isVisible,\n    onRequestClose: onBackdropPress,\n    transparent: true\n  }, rest), {}, {\n    children: [_jsx(Pressable, _objectSpread(_objectSpread({\n      style: StyleSheet.flatten([styles.backdrop, backdropStyle]),\n      onPress: onBackdropPress,\n      testID: \"RNE__Overlay__backdrop\"\n    }, pressableProps), {}, {\n      onPressOut: onPressOut,\n      onPressIn: onPressIn,\n      onLongPress: onLongPress\n    })), _jsx(View, {\n      testID: \"RNE__Overlay__Container\",\n      style: styles.container,\n      pointerEvents: \"box-none\",\n      children: _jsx(View, {\n        testID: \"RNE__Overlay\",\n        style: StyleSheet.flatten([styles.overlay, fullScreen && styles.fullscreen, overlayStyle, {\n          backgroundColor: Color(theme == null ? void 0 : (_theme$colors = theme.colors) == null ? void 0 : _theme$colors.white).lighten(10).rgb().toString()\n        }]),\n        children: children\n      })\n    })]\n  }));\n};\nvar styles = StyleSheet.create({\n  backdrop: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, .4)'\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fullscreen: {\n    width: '100%',\n    height: '100%'\n  },\n  overlay: _objectSpread({\n    backgroundColor: 'white',\n    borderRadius: 3,\n    padding: 10\n  }, Platform.select({\n    android: {\n      elevation: 2\n    },\n    default: {\n      shadowColor: 'rgba(0, 0, 0, .3)',\n      shadowOffset: {\n        width: 0,\n        height: 1\n      },\n      shadowRadius: 4\n    }\n  }))\n});\nOverlay.displayName = 'Overlay';","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/base/dist/Overlay/Overlay.js"],"names":["React","Color","Overlay","children","backdropStyle","overlayStyle","onBackdropPress","fullScreen","ModalComponent","Modal","isVisible","pressableProps","onPressOut","onPressIn","onLongPress","theme","rest","StyleSheet","flatten","styles","backdrop","container","overlay","fullscreen","backgroundColor","colors","white","lighten","rgb","toString","create","position","top","left","width","height","justifyContent","alignItems","flex","borderRadius","padding","Platform","select","android","elevation","default","shadowColor","shadowOffset","shadowRadius","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, Platform, Pressable, Modal, } from 'react-native';\nimport Color from 'color';\nexport const Overlay = ({ children, backdropStyle, overlayStyle, onBackdropPress = () => null, fullScreen = false, ModalComponent = Modal, isVisible, pressableProps, onPressOut, onPressIn, onLongPress, theme, ...rest }) => (<ModalComponent visible={isVisible} onRequestClose={onBackdropPress} transparent {...rest}>\n    <Pressable style={StyleSheet.flatten([styles.backdrop, backdropStyle])} onPress={onBackdropPress} testID=\"RNE__Overlay__backdrop\" {...pressableProps} {...{ onPressOut, onPressIn, onLongPress }}/>\n\n    <View testID=\"RNE__Overlay__Container\" style={styles.container} pointerEvents=\"box-none\">\n      <View testID=\"RNE__Overlay\" style={StyleSheet.flatten([\n        styles.overlay,\n        fullScreen && styles.fullscreen,\n        overlayStyle,\n        {\n            backgroundColor: Color(theme?.colors?.white)\n                .lighten(10)\n                .rgb()\n                .toString(),\n        },\n    ])}>\n        {children}\n      </View>\n    </View>\n  </ModalComponent>);\nconst styles = StyleSheet.create({\n    backdrop: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'rgba(0, 0, 0, .4)',\n    },\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    fullscreen: {\n        width: '100%',\n        height: '100%',\n    },\n    overlay: {\n        backgroundColor: 'white',\n        borderRadius: 3,\n        padding: 10,\n        ...Platform.select({\n            android: {\n                elevation: 2,\n            },\n            default: {\n                shadowColor: 'rgba(0, 0, 0, .3)',\n                shadowOffset: { width: 0, height: 1 },\n                shadowRadius: 4,\n            },\n        }),\n    },\n});\nOverlay.displayName = 'Overlay';\n"]},"metadata":{},"sourceType":"module"}