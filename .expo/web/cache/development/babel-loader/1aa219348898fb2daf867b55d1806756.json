{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _excluded = [\"children\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport deepmerge from 'deepmerge';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ThemeConsumer } from \"./ThemeProvider\";\nimport { colors } from \"./colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar isClassComponent = function isClassComponent(Component) {\n  var _Component$prototype;\n\n  return Boolean(Component == null ? void 0 : (_Component$prototype = Component.prototype) == null ? void 0 : _Component$prototype.isReactComponent);\n};\n\nvar ThemedComponent = function ThemedComponent(WrappedComponent, themeKey, displayName) {\n  return _extends(function (props, forwardedRef) {\n    var _children = props.children,\n        rest = _objectWithoutProperties(props, _excluded);\n\n    return _jsx(ThemeConsumer, {\n      children: function children(context) {\n        if (!context) {\n          var _newProps = _objectSpread(_objectSpread({}, rest), {}, {\n            theme: {\n              colors: colors\n            },\n            children: _children\n          });\n\n          return isClassComponent(WrappedComponent) ? _jsx(WrappedComponent, _objectSpread({\n            ref: forwardedRef\n          }, _newProps)) : _jsx(WrappedComponent, _objectSpread({}, _newProps));\n        }\n\n        var theme = context.theme,\n            updateTheme = context.updateTheme,\n            replaceTheme = context.replaceTheme;\n\n        var newProps = _objectSpread(_objectSpread({\n          theme: theme,\n          updateTheme: updateTheme,\n          replaceTheme: replaceTheme\n        }, deepmerge(themeKey && theme[themeKey] || {}, rest, {\n          clone: false\n        })), {}, {\n          children: _children\n        });\n\n        if (isClassComponent(WrappedComponent)) {\n          return _jsx(WrappedComponent, _objectSpread({\n            ref: forwardedRef\n          }, newProps));\n        }\n\n        return _jsx(WrappedComponent, _objectSpread({}, newProps));\n      }\n    });\n  }, {\n    displayName: displayName\n  });\n};\n\nfunction withTheme(WrappedComponent, themeKey) {\n  var name = themeKey ? \"Themed.\" + themeKey : \"Themed.\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component');\n  var Component = ThemedComponent(WrappedComponent, themeKey, name);\n\n  if (isClassComponent(WrappedComponent)) {\n    return hoistNonReactStatics(React.forwardRef(Component), WrappedComponent);\n  }\n\n  return Component;\n}\n\nexport default withTheme;","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/themed/dist/config/withTheme.js"],"names":["React","deepmerge","hoistNonReactStatics","ThemeConsumer","colors","isClassComponent","Component","Boolean","prototype","isReactComponent","ThemedComponent","WrappedComponent","themeKey","displayName","props","forwardedRef","children","rest","context","newProps","theme","updateTheme","replaceTheme","clone","withTheme","name","forwardRef"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,SAASC,aAAT;AACA,SAASC,MAAT;;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,SAAD;AAAA;;AAAA,SAAeC,OAAO,CAACD,SAAD,4CAACA,SAAS,CAAEE,SAAZ,qBAAC,qBAAsBC,gBAAvB,CAAtB;AAAA,CAAzB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,gBAAD,EAAmBC,QAAnB,EAA6BC,WAA7B,EAA6C;AACjE,SAAO,SAAc,UAACC,KAAD,EAAQC,YAAR,EAAyB;AAC1C,QAAQC,SAAR,GAA8BF,KAA9B,CAAQE,QAAR;AAAA,QAAqBC,IAArB,4BAA8BH,KAA9B;;AACA,WAAQ,KAAC,aAAD;AAAA,gBACL,kBAACI,OAAD,EAAa;AACR,YAAI,CAACA,OAAL,EAAc;AACV,cAAMC,SAAQ,mCAAQF,IAAR;AAAcG,YAAAA,KAAK,EAAE;AAAEhB,cAAAA,MAAM,EAANA;AAAF,aAArB;AAAiCY,YAAAA,QAAQ,EAARA;AAAjC,YAAd;;AACA,iBAAOX,gBAAgB,CAACM,gBAAD,CAAhB,GAAsC,KAAC,gBAAD;AAAkB,YAAA,GAAG,EAAEI;AAAvB,aAAyCI,SAAzC,EAAtC,GAA+F,KAAC,gBAAD,oBAAsBA,SAAtB,EAAtG;AACH;;AACD,YAAQC,KAAR,GAA6CF,OAA7C,CAAQE,KAAR;AAAA,YAAeC,WAAf,GAA6CH,OAA7C,CAAeG,WAAf;AAAA,YAA4BC,YAA5B,GAA6CJ,OAA7C,CAA4BI,YAA5B;;AACA,YAAMH,QAAQ;AACVC,UAAAA,KAAK,EAALA,KADU;AAEVC,UAAAA,WAAW,EAAXA,WAFU;AAGVC,UAAAA,YAAY,EAAZA;AAHU,WAIPrB,SAAS,CAAEW,QAAQ,IAClBQ,KAAK,CAACR,QAAD,CADI,IAET,EAFQ,EAEJK,IAFI,EAEE;AACVM,UAAAA,KAAK,EAAE;AADG,SAFF,CAJF;AASVP,UAAAA,QAAQ,EAARA;AATU,UAAd;;AAWA,YAAIX,gBAAgB,CAACM,gBAAD,CAApB,EAAwC;AACpC,iBAAO,KAAC,gBAAD;AAAkB,YAAA,GAAG,EAAEI;AAAvB,aAAyCI,QAAzC,EAAP;AACH;;AACD,eAAO,KAAC,gBAAD,oBAAsBA,QAAtB,EAAP;AACH;AAtBG,MAAR;AAwBH,GA1BM,EA0BJ;AAAEN,IAAAA,WAAW,EAAEA;AAAf,GA1BI,CAAP;AA2BH,CA5BD;;AA6BA,SAASW,SAAT,CAAmBb,gBAAnB,EAAqCC,QAArC,EAA+C;AAC3C,MAAMa,IAAI,GAAGb,QAAQ,eACLA,QADK,gBAELD,gBAAgB,CAACE,WAAjB,IAAgCF,gBAAgB,CAACc,IAAjD,IAAyD,WAFpD,CAArB;AAGA,MAAMnB,SAAS,GAAGI,eAAe,CAACC,gBAAD,EAAmBC,QAAnB,EAA6Ba,IAA7B,CAAjC;;AACA,MAAIpB,gBAAgB,CAACM,gBAAD,CAApB,EAAwC;AACpC,WAAOT,oBAAoB,CAACF,KAAK,CAAC0B,UAAN,CAAiBpB,SAAjB,CAAD,EAA8BK,gBAA9B,CAA3B;AACH;;AACD,SAAOL,SAAP;AACH;;AACD,eAAekB,SAAf","sourcesContent":["import React from 'react';\nimport deepmerge from 'deepmerge';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ThemeConsumer } from './ThemeProvider';\nimport { colors } from './colors';\nconst isClassComponent = (Component) => Boolean(Component?.prototype?.isReactComponent);\nconst ThemedComponent = (WrappedComponent, themeKey, displayName) => {\n    return Object.assign((props, forwardedRef) => {\n        const { children, ...rest } = props;\n        return (<ThemeConsumer>\n          {(context) => {\n                if (!context) {\n                    const newProps = { ...rest, theme: { colors }, children };\n                    return isClassComponent(WrappedComponent) ? (<WrappedComponent ref={forwardedRef} {...newProps}/>) : (<WrappedComponent {...newProps}/>);\n                }\n                const { theme, updateTheme, replaceTheme } = context;\n                const newProps = {\n                    theme,\n                    updateTheme,\n                    replaceTheme,\n                    ...deepmerge((themeKey &&\n                        theme[themeKey]) ||\n                        {}, rest, {\n                        clone: false,\n                    }),\n                    children,\n                };\n                if (isClassComponent(WrappedComponent)) {\n                    return <WrappedComponent ref={forwardedRef} {...newProps}/>;\n                }\n                return <WrappedComponent {...newProps}/>;\n            }}\n        </ThemeConsumer>);\n    }, { displayName: displayName });\n};\nfunction withTheme(WrappedComponent, themeKey) {\n    const name = themeKey\n        ? `Themed.${themeKey}`\n        : `Themed.${WrappedComponent.displayName || WrappedComponent.name || 'Component'}`;\n    const Component = ThemedComponent(WrappedComponent, themeKey, name);\n    if (isClassComponent(WrappedComponent)) {\n        return hoistNonReactStatics(React.forwardRef(Component), WrappedComponent);\n    }\n    return Component;\n}\nexport default withTheme;\n"]},"metadata":{},"sourceType":"module"}