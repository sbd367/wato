{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"featured\", \"imageSrc\", \"icon\", \"title\", \"children\", \"caption\", \"titleStyle\", \"onPress\", \"activeOpacity\", \"overlayContainerStyle\", \"captionStyle\", \"iconContainerStyle\", \"imageContainerStyle\", \"containerStyle\", \"contentContainerStyle\", \"titleNumberOfLines\", \"ImageComponent\", \"imageProps\", \"width\", \"height\", \"theme\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { Image } from \"../Image\";\nimport { Text } from \"../Text\";\nimport { Icon } from \"../Icon\";\nimport { FeaturedTile } from \"./components/FeaturedTile\";\nimport { androidRipple, defaultTheme } from \"../helpers\";\nimport Color from 'color';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var Tile = function Tile(_ref) {\n  var _theme$colors;\n\n  var featured = _ref.featured,\n      imageSrc = _ref.imageSrc,\n      icon = _ref.icon,\n      title = _ref.title,\n      children = _ref.children,\n      caption = _ref.caption,\n      titleStyle = _ref.titleStyle,\n      onPress = _ref.onPress,\n      activeOpacity = _ref.activeOpacity,\n      overlayContainerStyle = _ref.overlayContainerStyle,\n      captionStyle = _ref.captionStyle,\n      iconContainerStyle = _ref.iconContainerStyle,\n      imageContainerStyle = _ref.imageContainerStyle,\n      containerStyle = _ref.containerStyle,\n      contentContainerStyle = _ref.contentContainerStyle,\n      titleNumberOfLines = _ref.titleNumberOfLines,\n      _ref$ImageComponent = _ref.ImageComponent,\n      ImageComponent = _ref$ImageComponent === void 0 ? Image : _ref$ImageComponent,\n      _ref$imageProps = _ref.imageProps,\n      imageProps = _ref$imageProps === void 0 ? {} : _ref$imageProps,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? Dimensions.get('window').width : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? width * 0.8 : _ref$height,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n      attributes = _objectWithoutProperties(_ref, _excluded);\n\n  if (featured) {\n    var featuredProps = {\n      title: title,\n      icon: icon,\n      caption: caption,\n      imageSrc: imageSrc,\n      onPress: onPress,\n      activeOpacity: activeOpacity,\n      containerStyle: containerStyle,\n      imageContainerStyle: imageContainerStyle,\n      overlayContainerStyle: overlayContainerStyle,\n      titleStyle: titleStyle,\n      captionStyle: captionStyle,\n      width: width,\n      height: height,\n      imageProps: imageProps,\n      ImageComponent: ImageComponent\n    };\n    return _jsx(FeaturedTile, _objectSpread({}, featuredProps));\n  }\n\n  return _jsxs(Pressable, _objectSpread(_objectSpread({}, _objectSpread({\n    onPress: onPress,\n    android_ripple: androidRipple(Color(theme == null ? void 0 : (_theme$colors = theme.colors) == null ? void 0 : _theme$colors.primary).alpha(activeOpacity).rgb().toString())\n  }, attributes)), {}, {\n    style: StyleSheet.flatten([{\n      width: width,\n      height: height\n    }, containerStyle && containerStyle]),\n    children: [_jsx(ImageComponent, _objectSpread(_objectSpread({\n      resizeMode: \"cover\",\n      source: imageSrc,\n      containerStyle: StyleSheet.flatten([styles.imageContainer, imageContainerStyle && imageContainerStyle]),\n      style: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n        alignItems: 'center',\n        justifyContent: 'center'\n      })\n    }, imageProps), {}, {\n      children: _jsx(View, {\n        style: StyleSheet.flatten([styles.iconContainer, iconContainerStyle && iconContainerStyle]),\n        children: icon && _jsx(Icon, _objectSpread({}, icon))\n      })\n    })), _jsxs(View, {\n      style: StyleSheet.flatten([styles.contentContainer, contentContainerStyle && contentContainerStyle]),\n      children: [_jsx(Text, {\n        testID: \"tileTitle\",\n        h4: !titleStyle || !('fontSize' in titleStyle),\n        style: StyleSheet.flatten([styles.text, titleStyle && titleStyle]),\n        numberOfLines: titleNumberOfLines,\n        children: title\n      }), children]\n    })]\n  }));\n};\nvar styles = StyleSheet.create({\n  imageContainer: {\n    flex: 2\n  },\n  text: {\n    backgroundColor: 'rgba(0,0,0,0)',\n    marginBottom: 5\n  },\n  contentContainer: {\n    paddingTop: 15,\n    paddingBottom: 5,\n    paddingLeft: 15,\n    paddingRight: 15\n  },\n  iconContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignSelf: 'center'\n  }\n});\nTile.displayName = 'Tile';","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/base/dist/Tile/Tile.js"],"names":["React","Image","Text","Icon","FeaturedTile","androidRipple","defaultTheme","Color","Tile","featured","imageSrc","icon","title","children","caption","titleStyle","onPress","activeOpacity","overlayContainerStyle","captionStyle","iconContainerStyle","imageContainerStyle","containerStyle","contentContainerStyle","titleNumberOfLines","ImageComponent","imageProps","width","Dimensions","get","height","theme","attributes","featuredProps","android_ripple","colors","primary","alpha","rgb","toString","StyleSheet","flatten","styles","imageContainer","absoluteFillObject","alignItems","justifyContent","iconContainer","contentContainer","text","create","flex","backgroundColor","marginBottom","paddingTop","paddingBottom","paddingLeft","paddingRight","alignSelf","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, Dimensions, Pressable, } from 'react-native';\nimport { Image } from '../Image';\nimport { Text } from '../Text';\nimport { Icon } from '../Icon';\nimport { FeaturedTile } from './components/FeaturedTile';\nimport { androidRipple, defaultTheme } from '../helpers';\nimport Color from 'color';\nexport const Tile = ({ featured, imageSrc, icon, title, children, caption, titleStyle, onPress, activeOpacity, overlayContainerStyle, captionStyle, iconContainerStyle, imageContainerStyle, containerStyle, contentContainerStyle, titleNumberOfLines, ImageComponent = Image, imageProps = {}, width = Dimensions.get('window').width, height = width * 0.8, theme = defaultTheme, ...attributes }) => {\n    if (featured) {\n        const featuredProps = {\n            title,\n            icon,\n            caption,\n            imageSrc,\n            onPress,\n            activeOpacity,\n            containerStyle,\n            imageContainerStyle,\n            overlayContainerStyle,\n            titleStyle,\n            captionStyle,\n            width,\n            height,\n            imageProps,\n            ImageComponent,\n        };\n        return <FeaturedTile {...featuredProps}/>;\n    }\n    return (<Pressable {...{\n        onPress,\n        android_ripple: androidRipple(Color(theme?.colors?.primary).alpha(activeOpacity).rgb().toString()),\n        ...attributes,\n    }} style={StyleSheet.flatten([\n            {\n                width,\n                height,\n            },\n            containerStyle && containerStyle,\n        ])}>\n      <ImageComponent resizeMode=\"cover\" source={imageSrc} containerStyle={StyleSheet.flatten([\n            styles.imageContainer,\n            imageContainerStyle && imageContainerStyle,\n        ])} style={{\n            ...StyleSheet.absoluteFillObject,\n            alignItems: 'center',\n            justifyContent: 'center',\n        }} {...imageProps}>\n        <View style={StyleSheet.flatten([\n            styles.iconContainer,\n            iconContainerStyle && iconContainerStyle,\n        ])}>\n          {icon && <Icon {...icon}/>}\n        </View>\n      </ImageComponent>\n\n      <View style={StyleSheet.flatten([\n            styles.contentContainer,\n            contentContainerStyle && contentContainerStyle,\n        ])}>\n        <Text testID=\"tileTitle\" h4={!titleStyle || !('fontSize' in titleStyle)} style={StyleSheet.flatten([styles.text, titleStyle && titleStyle])} numberOfLines={titleNumberOfLines}>\n          {title}\n        </Text>\n        {children}\n      </View>\n    </Pressable>);\n};\nconst styles = StyleSheet.create({\n    imageContainer: {\n        flex: 2,\n    },\n    text: {\n        backgroundColor: 'rgba(0,0,0,0)',\n        marginBottom: 5,\n    },\n    contentContainer: {\n        paddingTop: 15,\n        paddingBottom: 5,\n        paddingLeft: 15,\n        paddingRight: 15,\n    },\n    iconContainer: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        alignSelf: 'center',\n    },\n});\nTile.displayName = 'Tile';\n"]},"metadata":{},"sourceType":"module"}