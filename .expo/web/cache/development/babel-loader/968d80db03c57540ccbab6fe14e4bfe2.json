{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"circle\", \"width\", \"height\", \"animation\", \"style\", \"skeletonStyle\", \"theme\", \"LinearGradientComponent\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { defaultTheme } from \"../helpers\";\nimport Color from 'color';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var Skeleton = function Skeleton(_ref) {\n  var _theme$colors, _theme$colors2;\n\n  var circle = _ref.circle,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? '100%' : _ref$width,\n      height = _ref.height,\n      _ref$animation = _ref.animation,\n      animation = _ref$animation === void 0 ? 'wave' : _ref$animation,\n      style = _ref.style,\n      skeletonStyle = _ref.skeletonStyle,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n      LinearGradientComponent = _ref.LinearGradientComponent,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var animationRef = useRef(new Animated.Value(0));\n  var animationLoop = useRef();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layoutWidth = _React$useState2[0],\n      setLayoutWidth = _React$useState2[1];\n\n  useEffect(function () {\n    animationLoop.current = Animated.timing(animationRef.current, {\n      toValue: 2,\n      delay: 400,\n      duration: 1500,\n      useNativeDriver: !!Platform.select({\n        web: false,\n        native: true\n      })\n    });\n    animationRef.current.setValue(0);\n    Animated.loop(animationLoop.current).start();\n  }, []);\n  return _jsx(View, _objectSpread(_objectSpread({\n    accessibilityRole: \"none\",\n    accessibilityLabel: \"loading...\",\n    accessible: false,\n    testID: \"RNE__Skeleton\",\n    onLayout: function onLayout(_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      setLayoutWidth(nativeEvent.layout.width);\n    },\n    style: [styles.container, {\n      width: width,\n      height: height || 12,\n      backgroundColor: theme == null ? void 0 : (_theme$colors = theme.colors) == null ? void 0 : _theme$colors.grey4\n    }, circle && {\n      borderRadius: 50,\n      height: height || width\n    }, style]\n  }, rest), {}, {\n    children: animation !== 'none' && _jsx(Animated.View, {\n      style: [styles.skeleton, !LinearGradientComponent && {\n        backgroundColor: Color(theme == null ? void 0 : (_theme$colors2 = theme.colors) == null ? void 0 : _theme$colors2.grey4).darken(0.1).rgb().string()\n      }, animation === 'pulse' && {\n        width: '100%',\n        opacity: animationRef.current.interpolate({\n          inputRange: [0, 1, 2],\n          outputRange: [1, 0, 1]\n        })\n      }, animation === 'wave' && {\n        transform: [{\n          translateX: animationRef.current.interpolate({\n            inputRange: [0, 2],\n            outputRange: [-layoutWidth * 2, layoutWidth * 2]\n          })\n        }]\n      }, skeletonStyle],\n      children: LinearGradientComponent && _jsx(LinearGradientComponent, {\n        style: styles.skeleton,\n        colors: [theme.colors.grey4, theme.colors.grey5, theme.colors.grey4],\n        start: {\n          x: 0,\n          y: 0\n        },\n        end: {\n          x: 1,\n          y: 0\n        }\n      })\n    })\n  }));\n};\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    borderRadius: 2\n  },\n  skeleton: {\n    height: '100%'\n  }\n});","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/base/dist/Skeleton/Skeleton.js"],"names":["React","useEffect","useRef","defaultTheme","Color","Skeleton","circle","width","height","animation","style","skeletonStyle","theme","LinearGradientComponent","rest","animationRef","Animated","Value","animationLoop","useState","layoutWidth","setLayoutWidth","current","timing","toValue","delay","duration","useNativeDriver","Platform","select","web","native","setValue","loop","start","nativeEvent","layout","styles","container","backgroundColor","colors","grey4","borderRadius","skeleton","darken","rgb","string","opacity","interpolate","inputRange","outputRange","transform","translateX","grey5","x","y","StyleSheet","create","overflow"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Animated, View, Platform, StyleSheet, } from 'react-native';\nimport { defaultTheme } from '../helpers';\nimport Color from 'color';\nexport const Skeleton = ({ circle, width = '100%', height, animation = 'wave', style, skeletonStyle, theme = defaultTheme, LinearGradientComponent, ...rest }) => {\n    const animationRef = useRef(new Animated.Value(0));\n    const animationLoop = useRef();\n    const [layoutWidth, setLayoutWidth] = React.useState(0);\n    useEffect(() => {\n        animationLoop.current = Animated.timing(animationRef.current, {\n            toValue: 2,\n            delay: 400,\n            duration: 1500,\n            useNativeDriver: !!Platform.select({\n                web: false,\n                native: true,\n            }),\n        });\n        animationRef.current.setValue(0);\n        Animated.loop(animationLoop.current).start();\n    }, []);\n    return (<View accessibilityRole=\"none\" accessibilityLabel=\"loading...\" accessible={false} testID=\"RNE__Skeleton\" onLayout={({ nativeEvent }) => {\n            setLayoutWidth(nativeEvent.layout.width);\n        }} style={[\n            styles.container,\n            {\n                width: width,\n                height: height || 12,\n                backgroundColor: theme?.colors?.grey4,\n            },\n            circle && {\n                borderRadius: 50,\n                height: height || width,\n            },\n            style,\n        ]} {...rest}>\n      {animation !== 'none' && (<Animated.View style={[\n                styles.skeleton,\n                !LinearGradientComponent && {\n                    backgroundColor: Color(theme?.colors?.grey4)\n                        .darken(0.1)\n                        .rgb()\n                        .string(),\n                },\n                animation === 'pulse' && {\n                    width: '100%',\n                    opacity: animationRef.current.interpolate({\n                        inputRange: [0, 1, 2],\n                        outputRange: [1, 0, 1],\n                    }),\n                },\n                animation === 'wave' && {\n                    transform: [\n                        {\n                            translateX: animationRef.current.interpolate({\n                                inputRange: [0, 2],\n                                outputRange: [-layoutWidth * 2, layoutWidth * 2],\n                            }),\n                        },\n                    ],\n                },\n                skeletonStyle,\n            ]}>\n          {LinearGradientComponent && (<LinearGradientComponent style={styles.skeleton} colors={[\n                    theme.colors.grey4,\n                    theme.colors.grey5,\n                    theme.colors.grey4,\n                ]} start={{ x: 0, y: 0 }} end={{ x: 1, y: 0 }}/>)}\n        </Animated.View>)}\n    </View>);\n};\nconst styles = StyleSheet.create({\n    container: {\n        overflow: 'hidden',\n        borderRadius: 2,\n    },\n    skeleton: {\n        height: '100%',\n    },\n});\n"]},"metadata":{},"sourceType":"module"}