{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { defaultTheme } from \"../helpers\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var DialogLoading = function DialogLoading(_ref) {\n  var _loadingProps$color, _theme$colors, _loadingProps$size;\n\n  var loadingStyle = _ref.loadingStyle,\n      loadingProps = _ref.loadingProps,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultTheme : _ref$theme;\n  return _jsx(View, {\n    style: styles.loadingView,\n    children: _jsx(ActivityIndicator, _objectSpread({\n      style: StyleSheet.flatten([styles.loading, loadingStyle]),\n      color: (_loadingProps$color = loadingProps == null ? void 0 : loadingProps.color) != null ? _loadingProps$color : theme == null ? void 0 : (_theme$colors = theme.colors) == null ? void 0 : _theme$colors.primary,\n      size: (_loadingProps$size = loadingProps == null ? void 0 : loadingProps.size) != null ? _loadingProps$size : 'large',\n      testID: \"Dialog__Loading\"\n    }, loadingProps))\n  });\n};\nDialogLoading.defaultProps = {\n  loadingProps: {\n    size: 'large'\n  }\n};\nvar styles = StyleSheet.create({\n  loading: {\n    marginVertical: 20\n  },\n  loadingView: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nDialogLoading.displayName = 'Dialog.Loading';","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/base/dist/Dialog/Dialog.Loading.js"],"names":["React","defaultTheme","DialogLoading","loadingStyle","loadingProps","theme","styles","loadingView","StyleSheet","flatten","loading","color","colors","primary","size","defaultProps","create","marginVertical","flexDirection","justifyContent","alignItems","displayName"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,YAAT;;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAA2D;AAAA;;AAAA,MAAxDC,YAAwD,QAAxDA,YAAwD;AAAA,MAA1CC,YAA0C,QAA1CA,YAA0C;AAAA,wBAA5BC,KAA4B;AAAA,MAA5BA,KAA4B,2BAApBJ,YAAoB;AACpF,SAAQ,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEK,MAAM,CAACC,WAApB;AAAA,cACN,KAAC,iBAAD;AAAmB,MAAA,KAAK,EAAEC,UAAU,CAACC,OAAX,CAAmB,CAACH,MAAM,CAACI,OAAR,EAAiBP,YAAjB,CAAnB,CAA1B;AAA8E,MAAA,KAAK,yBAAEC,YAAF,oBAAEA,YAAY,CAAEO,KAAhB,kCAAyBN,KAAzB,qCAAyBA,KAAK,CAAEO,MAAhC,qBAAyB,cAAeC,OAA3H;AAAoI,MAAA,IAAI,wBAAET,YAAF,oBAAEA,YAAY,CAAEU,IAAhB,iCAAwB,OAAhK;AAAyK,MAAA,MAAM,EAAC;AAAhL,OAAsMV,YAAtM;AADM,IAAR;AAGH,CAJM;AAKPF,aAAa,CAACa,YAAd,GAA6B;AACzBX,EAAAA,YAAY,EAAE;AAAEU,IAAAA,IAAI,EAAE;AAAR;AADW,CAA7B;AAGA,IAAMR,MAAM,GAAGE,UAAU,CAACQ,MAAX,CAAkB;AAC7BN,EAAAA,OAAO,EAAE;AACLO,IAAAA,cAAc,EAAE;AADX,GADoB;AAI7BV,EAAAA,WAAW,EAAE;AACTW,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,UAAU,EAAE;AAHH;AAJgB,CAAlB,CAAf;AAUAlB,aAAa,CAACmB,WAAd,GAA4B,gBAA5B","sourcesContent":["import React from 'react';\nimport { StyleSheet, ActivityIndicator, View, } from 'react-native';\nimport { defaultTheme } from '../helpers';\nexport const DialogLoading = ({ loadingStyle, loadingProps, theme = defaultTheme, }) => {\n    return (<View style={styles.loadingView}>\n      <ActivityIndicator style={StyleSheet.flatten([styles.loading, loadingStyle])} color={loadingProps?.color ?? theme?.colors?.primary} size={loadingProps?.size ?? 'large'} testID=\"Dialog__Loading\" {...loadingProps}/>\n    </View>);\n};\nDialogLoading.defaultProps = {\n    loadingProps: { size: 'large' },\n};\nconst styles = StyleSheet.create({\n    loading: {\n        marginVertical: 20,\n    },\n    loadingView: {\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n});\nDialogLoading.displayName = 'Dialog.Loading';\n"]},"metadata":{},"sourceType":"module"}