{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"style\", \"underlayColor\", \"onPress\", \"onLongPress\", \"onPressIn\", \"onPressOut\", \"source\", \"pressableProps\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Image } from \"../Image\";\nimport { Icon } from \"../Icon\";\nimport { androidRipple } from \"../helpers\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var Accessory = function Accessory(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 10 : _ref$size,\n      style = _ref.style,\n      _ref$underlayColor = _ref.underlayColor,\n      underlayColor = _ref$underlayColor === void 0 ? '#000' : _ref$underlayColor,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      source = _ref.source,\n      pressableProps = _ref.pressableProps,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsx(Pressable, _objectSpread(_objectSpread({}, _objectSpread({\n    android_ripple: (onPress || onLongPress) && androidRipple(underlayColor)\n  }, pressableProps)), {}, {\n    style: [styles.accessory, {\n      width: size,\n      height: size,\n      borderRadius: size / 2\n    }, style],\n    onPressOut: onPressOut,\n    onPressIn: onPressIn,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    children: _jsx(View, {\n      children: source ? _jsx(Image, _objectSpread({\n        source: source,\n        style: {\n          width: size,\n          height: size,\n          borderRadius: size / 2\n        }\n      }, rest)) : _jsx(Icon, _objectSpread({\n        name: \"mode-edit\",\n        type: \"material\",\n        color: \"#fff\",\n        size: size * 0.8\n      }, rest))\n    })\n  }));\n};\nvar styles = StyleSheet.create({\n  accessory: _objectSpread({\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#aaa'\n  }, Platform.select({\n    android: {\n      elevation: 1\n    },\n    default: {\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 1,\n        height: 1\n      },\n      shadowRadius: 2,\n      shadowOpacity: 0.5\n    }\n  }))\n});\nAccessory.displayName = 'Avatar.Accessory';","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/base/dist/Avatar/Avatar.Accessory.js"],"names":["React","Image","Icon","androidRipple","Accessory","size","style","underlayColor","onPress","onLongPress","onPressIn","onPressOut","source","pressableProps","rest","android_ripple","styles","accessory","width","height","borderRadius","StyleSheet","create","position","bottom","right","alignItems","justifyContent","backgroundColor","Platform","select","android","elevation","default","shadowColor","shadowOffset","shadowRadius","shadowOpacity","displayName"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,SAASC,KAAT;AACA,SAASC,IAAT;AACA,SAASC,aAAT;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAgI;AAAA,uBAA7HC,IAA6H;AAAA,MAA7HA,IAA6H,0BAAtH,EAAsH;AAAA,MAAlHC,KAAkH,QAAlHA,KAAkH;AAAA,gCAA3GC,aAA2G;AAAA,MAA3GA,aAA2G,mCAA3F,MAA2F;AAAA,MAAnFC,OAAmF,QAAnFA,OAAmF;AAAA,MAA1EC,WAA0E,QAA1EA,WAA0E;AAAA,MAA7DC,SAA6D,QAA7DA,SAA6D;AAAA,MAAlDC,UAAkD,QAAlDA,UAAkD;AAAA,MAAtCC,MAAsC,QAAtCA,MAAsC;AAAA,MAA9BC,cAA8B,QAA9BA,cAA8B;AAAA,MAAXC,IAAW;;AACrJ,SAAQ,KAAC,SAAD;AACJC,IAAAA,cAAc,EAAE,CAACP,OAAO,IAAIC,WAAZ,KAA4BN,aAAa,CAACI,aAAD;AADrD,KAEDM,cAFC;AAGL,IAAA,KAAK,EAAE,CACFG,MAAM,CAACC,SADL,EAEF;AACIC,MAAAA,KAAK,EAAEb,IADX;AAEIc,MAAAA,MAAM,EAAEd,IAFZ;AAGIe,MAAAA,YAAY,EAAEf,IAAI,GAAG;AAHzB,KAFE,EAOFC,KAPE,CAHF;AAWKK,IAAAA,UAAU,EAAVA,UAXL;AAWiBD,IAAAA,SAAS,EAATA,SAXjB;AAW4BF,IAAAA,OAAO,EAAPA,OAX5B;AAWqCC,IAAAA,WAAW,EAAXA,WAXrC;AAAA,cAYN,KAAC,IAAD;AAAA,gBACGG,MAAM,GAAI,KAAC,KAAD;AAAO,QAAA,MAAM,EAAEA,MAAf;AAAuB,QAAA,KAAK,EAAE;AACjCM,UAAAA,KAAK,EAAEb,IAD0B;AAEjCc,UAAAA,MAAM,EAAEd,IAFyB;AAGjCe,UAAAA,YAAY,EAAEf,IAAI,GAAG;AAHY;AAA9B,SAIAS,IAJA,EAAJ,GAIgB,KAAC,IAAD;AAAM,QAAA,IAAI,EAAC,WAAX;AAAuB,QAAA,IAAI,EAAC,UAA5B;AAAuC,QAAA,KAAK,EAAC,MAA7C;AAAoD,QAAA,IAAI,EAAET,IAAI,GAAG;AAAjE,SAA0ES,IAA1E;AALzB;AAZM,KAAR;AAoBH,CArBM;AAsBP,IAAME,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7BL,EAAAA,SAAS;AACLM,IAAAA,QAAQ,EAAE,UADL;AAELC,IAAAA,MAAM,EAAE,CAFH;AAGLC,IAAAA,KAAK,EAAE,CAHF;AAILC,IAAAA,UAAU,EAAE,QAJP;AAKLC,IAAAA,cAAc,EAAE,QALX;AAMLC,IAAAA,eAAe,EAAE;AANZ,KAOFC,QAAQ,CAACC,MAAT,CAAgB;AACfC,IAAAA,OAAO,EAAE;AACLC,MAAAA,SAAS,EAAE;AADN,KADM;AAIfC,IAAAA,OAAO,EAAE;AACLC,MAAAA,WAAW,EAAE,MADR;AAELC,MAAAA,YAAY,EAAE;AAAEjB,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAFT;AAGLiB,MAAAA,YAAY,EAAE,CAHT;AAILC,MAAAA,aAAa,EAAE;AAJV;AAJM,GAAhB,CAPE;AADoB,CAAlB,CAAf;AAqBAjC,SAAS,CAACkC,WAAV,GAAwB,kBAAxB","sourcesContent":["import React from 'react';\nimport { Pressable, View, Platform, StyleSheet, } from 'react-native';\nimport { Image } from '../Image';\nimport { Icon } from '../Icon';\nimport { androidRipple, } from '../helpers';\nexport const Accessory = ({ size = 10, style, underlayColor = '#000', onPress, onLongPress, onPressIn, onPressOut, source, pressableProps, ...rest }) => {\n    return (<Pressable {...{\n        android_ripple: (onPress || onLongPress) && androidRipple(underlayColor),\n        ...pressableProps,\n    }} style={[\n            styles.accessory,\n            {\n                width: size,\n                height: size,\n                borderRadius: size / 2,\n            },\n            style,\n        ]} {...{ onPressOut, onPressIn, onPress, onLongPress }}>\n      <View>\n        {source ? (<Image source={source} style={{\n                width: size,\n                height: size,\n                borderRadius: size / 2,\n            }} {...rest}/>) : (<Icon name=\"mode-edit\" type=\"material\" color=\"#fff\" size={size * 0.8} {...rest}/>)}\n      </View>\n    </Pressable>);\n};\nconst styles = StyleSheet.create({\n    accessory: {\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: '#aaa',\n        ...Platform.select({\n            android: {\n                elevation: 1,\n            },\n            default: {\n                shadowColor: '#000',\n                shadowOffset: { width: 1, height: 1 },\n                shadowRadius: 2,\n                shadowOpacity: 0.5,\n            },\n        }),\n    },\n});\nAccessory.displayName = 'Avatar.Accessory';\n"]},"metadata":{},"sourceType":"module"}