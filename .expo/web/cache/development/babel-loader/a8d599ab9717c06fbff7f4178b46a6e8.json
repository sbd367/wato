{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"type\", \"name\", \"size\", \"color\", \"iconStyle\", \"iconProps\", \"underlayColor\", \"reverse\", \"raised\", \"containerStyle\", \"reverseColor\", \"disabled\", \"disabledStyle\", \"onPress\", \"onLongPress\", \"onPressIn\", \"onPressOut\", \"Component\", \"solid\", \"brand\", \"theme\", \"pressableProps\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Color from 'color';\nimport getIconType from \"../helpers/getIconType\";\nimport getIconStyle from \"../helpers/getIconStyle\";\nimport { androidRipple, defaultTheme } from \"../helpers\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var Icon = function Icon(_ref) {\n  var _theme$colors, _theme$colors2, _theme$colors4;\n\n  var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'material' : _ref$type,\n      name = _ref.name,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      colorProp = _ref.color,\n      iconStyle = _ref.iconStyle,\n      iconProps = _ref.iconProps,\n      _ref$underlayColor = _ref.underlayColor,\n      underlayColor = _ref$underlayColor === void 0 ? 'transparent' : _ref$underlayColor,\n      _ref$reverse = _ref.reverse,\n      reverse = _ref$reverse === void 0 ? false : _ref$reverse,\n      _ref$raised = _ref.raised,\n      raised = _ref$raised === void 0 ? false : _ref$raised,\n      containerStyle = _ref.containerStyle,\n      reverseColorProp = _ref.reverseColor,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      disabledStyle = _ref.disabledStyle,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      _ref$Component = _ref.Component,\n      Component = _ref$Component === void 0 ? onPress || onLongPress || onPressIn || onPressOut ? Pressable : View : _ref$Component,\n      _ref$solid = _ref.solid,\n      solid = _ref$solid === void 0 ? false : _ref$solid,\n      _ref$brand = _ref.brand,\n      brand = _ref$brand === void 0 ? false : _ref$brand,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n      pressableProps = _ref.pressableProps,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var color = colorProp || (theme == null ? void 0 : (_theme$colors = theme.colors) == null ? void 0 : _theme$colors.black);\n  var reverseColor = reverseColorProp || (theme == null ? void 0 : (_theme$colors2 = theme.colors) == null ? void 0 : _theme$colors2.white);\n  var IconComponent = getIconType(type);\n  var iconSpecificStyle = getIconStyle(type, {\n    solid: solid,\n    brand: brand\n  });\n  var getBackgroundColor = React.useMemo(function () {\n    var _theme$colors3;\n\n    if (reverse) {\n      return color;\n    }\n\n    return raised ? theme == null ? void 0 : (_theme$colors3 = theme.colors) == null ? void 0 : _theme$colors3.white : 'transparent';\n  }, [color, raised, reverse, theme == null ? void 0 : (_theme$colors4 = theme.colors) == null ? void 0 : _theme$colors4.white]);\n  var buttonStyles = React.useMemo(function () {\n    return {\n      borderRadius: size + 4,\n      height: size * 2 + 4,\n      width: size * 2 + 4\n    };\n  }, [size]);\n  return _jsx(View, {\n    style: StyleSheet.flatten([styles.container, (reverse || raised) && styles.button, (reverse || raised) && buttonStyles, raised && styles.raised, iconStyle && iconStyle.borderRadius ? {\n      borderRadius: iconStyle.borderRadius\n    } : {}, containerStyle && containerStyle]),\n    testID: \"RNE__ICON__CONTAINER\",\n    children: _jsx(Component, _objectSpread(_objectSpread({\n      testID: \"RNE__ICON__CONTAINER_ACTION\"\n    }, _objectSpread(_objectSpread({\n      android_ripple: androidRipple(Color(reverse ? color : underlayColor).alpha(0.3).rgb().string()),\n      onPress: onPress,\n      onLongPress: onLongPress,\n      onPressIn: onPressIn,\n      onPressOut: onPressOut,\n      disabled: disabled,\n      accessibilityRole: 'button'\n    }, pressableProps), rest)), {}, {\n      children: _jsx(View, {\n        style: StyleSheet.flatten([(reverse || raised) && buttonStyles, {\n          backgroundColor: getBackgroundColor,\n          alignItems: 'center',\n          justifyContent: 'center'\n        }, disabled && styles.disabled, disabled && disabledStyle]),\n        testID: \"RNE__ICON\",\n        children: _jsx(IconComponent, _objectSpread(_objectSpread({\n          testID: \"RNE__ICON__Component\",\n          style: StyleSheet.flatten([{\n            backgroundColor: 'transparent'\n          }, iconStyle && iconStyle]),\n          size: size,\n          name: name,\n          color: reverse ? reverseColor : color\n        }, iconSpecificStyle), iconProps))\n      })\n    }))\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  button: {\n    margin: 7\n  },\n  raised: _objectSpread({}, Platform.select({\n    android: {\n      elevation: 2\n    },\n    default: {\n      shadowColor: 'rgba(0,0,0, .4)',\n      shadowOffset: {\n        height: 1,\n        width: 1\n      },\n      shadowOpacity: 1,\n      shadowRadius: 1\n    }\n  })),\n  disabled: {\n    backgroundColor: '#D1D5D8'\n  }\n});\nIcon.displayName = 'Icon';","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/base/dist/Icon/Icon.js"],"names":["React","Color","getIconType","getIconStyle","androidRipple","defaultTheme","Icon","type","name","size","colorProp","color","iconStyle","iconProps","underlayColor","reverse","raised","containerStyle","reverseColorProp","reverseColor","disabled","disabledStyle","onPress","onLongPress","onPressIn","onPressOut","Component","Pressable","View","solid","brand","theme","pressableProps","rest","colors","black","white","IconComponent","iconSpecificStyle","getBackgroundColor","useMemo","buttonStyles","borderRadius","height","width","StyleSheet","flatten","styles","container","button","android_ripple","alpha","rgb","string","accessibilityRole","backgroundColor","alignItems","justifyContent","create","overflow","margin","Platform","select","android","elevation","default","shadowColor","shadowOffset","shadowOpacity","shadowRadius","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Platform, View, StyleSheet, Pressable, } from 'react-native';\nimport Color from 'color';\nimport getIconType from '../helpers/getIconType';\nimport getIconStyle from '../helpers/getIconStyle';\nimport { androidRipple, defaultTheme, } from '../helpers';\nexport const Icon = ({ type = 'material', name, size = 24, color: colorProp, iconStyle, iconProps, underlayColor = 'transparent', reverse = false, raised = false, containerStyle, reverseColor: reverseColorProp, disabled = false, disabledStyle, onPress, onLongPress, onPressIn, onPressOut, Component = onPress || onLongPress || onPressIn || onPressOut\n    ? Pressable\n    : View, solid = false, brand = false, theme = defaultTheme, pressableProps, ...rest }) => {\n    const color = colorProp || theme?.colors?.black;\n    const reverseColor = reverseColorProp || theme?.colors?.white;\n    const IconComponent = getIconType(type);\n    const iconSpecificStyle = getIconStyle(type, { solid, brand });\n    const getBackgroundColor = React.useMemo(() => {\n        if (reverse) {\n            return color;\n        }\n        return raised ? theme?.colors?.white : 'transparent';\n    }, [color, raised, reverse, theme?.colors?.white]);\n    const buttonStyles = React.useMemo(() => ({\n        borderRadius: size + 4,\n        height: size * 2 + 4,\n        width: size * 2 + 4,\n    }), [size]);\n    return (<View style={StyleSheet.flatten([\n            styles.container,\n            (reverse || raised) && styles.button,\n            (reverse || raised) && buttonStyles,\n            raised && styles.raised,\n            iconStyle && iconStyle.borderRadius\n                ? {\n                    borderRadius: iconStyle.borderRadius,\n                }\n                : {},\n            containerStyle && containerStyle,\n        ])} testID=\"RNE__ICON__CONTAINER\">\n      <Component testID=\"RNE__ICON__CONTAINER_ACTION\" {...{\n        android_ripple: androidRipple(Color(reverse ? color : underlayColor)\n            .alpha(0.3)\n            .rgb()\n            .string()),\n        onPress,\n        onLongPress,\n        onPressIn,\n        onPressOut,\n        disabled,\n        accessibilityRole: 'button',\n        ...pressableProps,\n        ...rest,\n    }}>\n        <View style={StyleSheet.flatten([\n            (reverse || raised) && buttonStyles,\n            {\n                backgroundColor: getBackgroundColor,\n                alignItems: 'center',\n                justifyContent: 'center',\n            },\n            disabled && styles.disabled,\n            disabled && disabledStyle,\n        ])} testID=\"RNE__ICON\">\n          <IconComponent testID=\"RNE__ICON__Component\" style={StyleSheet.flatten([\n            { backgroundColor: 'transparent' },\n            iconStyle && iconStyle,\n        ])} size={size} name={name} color={reverse ? reverseColor : color} {...iconSpecificStyle} {...iconProps}/>\n        </View>\n      </Component>\n    </View>);\n};\nconst styles = StyleSheet.create({\n    container: {\n        overflow: 'hidden',\n    },\n    button: {\n        margin: 7,\n    },\n    raised: {\n        ...Platform.select({\n            android: {\n                elevation: 2,\n            },\n            default: {\n                shadowColor: 'rgba(0,0,0, .4)',\n                shadowOffset: { height: 1, width: 1 },\n                shadowOpacity: 1,\n                shadowRadius: 1,\n            },\n        }),\n    },\n    disabled: {\n        backgroundColor: '#D1D5D8',\n    },\n});\nIcon.displayName = 'Icon';\n"]},"metadata":{},"sourceType":"module"}