{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"withOverlay\", \"overlayColor\", \"highlightColor\", \"withPointer\", \"toggleOnPress\", \"toggleAction\", \"height\", \"width\", \"containerStyle\", \"backgroundColor\", \"pointerColor\", \"pointerStyle\", \"onClose\", \"onOpen\", \"visible\", \"skipAndroidStatusBar\", \"ModalComponent\", \"closeOnlyOnBackdropPress\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Triangle from \"./components/Triangle\";\nimport { ScreenWidth, isIOS } from \"../helpers\";\nimport { getElementVisibleWidth } from \"./helpers/getTooltipCoordinate\";\nimport { getTooltipStyle } from \"./helpers/getTooltipStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var Tooltip = function Tooltip(_ref) {\n  var _ref$withOverlay = _ref.withOverlay,\n      withOverlay = _ref$withOverlay === void 0 ? true : _ref$withOverlay,\n      _ref$overlayColor = _ref.overlayColor,\n      overlayColor = _ref$overlayColor === void 0 ? '#fafafa14' : _ref$overlayColor,\n      _ref$highlightColor = _ref.highlightColor,\n      highlightColor = _ref$highlightColor === void 0 ? 'transparent' : _ref$highlightColor,\n      _ref$withPointer = _ref.withPointer,\n      withPointer = _ref$withPointer === void 0 ? true : _ref$withPointer,\n      _ref$toggleOnPress = _ref.toggleOnPress,\n      toggleOnPress = _ref$toggleOnPress === void 0 ? true : _ref$toggleOnPress,\n      _ref$toggleAction = _ref.toggleAction,\n      toggleAction = _ref$toggleAction === void 0 ? 'onPress' : _ref$toggleAction,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 40 : _ref$height,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 150 : _ref$width,\n      _ref$containerStyle = _ref.containerStyle,\n      containerStyle = _ref$containerStyle === void 0 ? {} : _ref$containerStyle,\n      _ref$backgroundColor = _ref.backgroundColor,\n      backgroundColor = _ref$backgroundColor === void 0 ? '#617080' : _ref$backgroundColor,\n      _ref$pointerColor = _ref.pointerColor,\n      pointerColor = _ref$pointerColor === void 0 ? backgroundColor : _ref$pointerColor,\n      pointerStyle = _ref.pointerStyle,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,\n      _ref$onOpen = _ref.onOpen,\n      onOpen = _ref$onOpen === void 0 ? function () {} : _ref$onOpen,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      _ref$skipAndroidStatu = _ref.skipAndroidStatusBar,\n      skipAndroidStatusBar = _ref$skipAndroidStatu === void 0 ? false : _ref$skipAndroidStatu,\n      _ref$ModalComponent = _ref.ModalComponent,\n      ModalComponent = _ref$ModalComponent === void 0 ? Modal : _ref$ModalComponent,\n      _ref$closeOnlyOnBackd = _ref.closeOnlyOnBackdropPress,\n      closeOnlyOnBackdropPress = _ref$closeOnlyOnBackd === void 0 ? false : _ref$closeOnlyOnBackd,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var isMounted = React.useRef(false);\n  var renderedElement = React.useRef(null);\n\n  var _React$useState = React.useState({\n    yOffset: 0,\n    xOffset: 0,\n    elementWidth: 0,\n    elementHeight: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  var getElementPosition = React.useCallback(function () {\n    renderedElement.current && renderedElement.current.measure(function (_frameOffsetX, _frameOffsetY, _width, _height, pageOffsetX, pageOffsetY) {\n      isMounted.current && setDimensions({\n        xOffset: pageOffsetX,\n        yOffset: isIOS || skipAndroidStatusBar ? pageOffsetY : pageOffsetY - Platform.select({\n          android: StatusBar.currentHeight,\n          ios: 20,\n          default: 0\n        }),\n        elementWidth: _width,\n        elementHeight: _height\n      });\n    });\n  }, [skipAndroidStatusBar]);\n  var handleOnPress = React.useCallback(function () {\n    getElementPosition();\n    isMounted.current && toggleOnPress && (visible ? onClose == null ? void 0 : onClose() : onOpen == null ? void 0 : onOpen());\n  }, [getElementPosition, onClose, onOpen, toggleOnPress, visible]);\n\n  var Pointer = function Pointer(_ref2) {\n    var tooltipY = _ref2.tooltipY;\n    var yOffset = dimensions.yOffset,\n        xOffset = dimensions.xOffset,\n        elementHeight = dimensions.elementHeight,\n        elementWidth = dimensions.elementWidth;\n    var pastMiddleLine = yOffset > (tooltipY || 0);\n\n    if (!withPointer) {\n      return null;\n    }\n\n    return _jsx(View, {\n      style: _defineProperty({\n        position: 'absolute',\n        top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2\n      }, I18nManager.isRTL ? 'right' : 'left', xOffset + getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 - 7.5),\n      children: _jsx(Triangle, {\n        style: pointerStyle,\n        pointerColor: pointerColor,\n        isDown: pastMiddleLine\n      })\n    });\n  };\n\n  var TooltipHighlightedButtonStyle = React.useMemo(function () {\n    var _ref4;\n\n    var yOffset = dimensions.yOffset,\n        xOffset = dimensions.xOffset,\n        elementWidth = dimensions.elementWidth,\n        elementHeight = dimensions.elementHeight;\n    return _ref4 = {\n      position: 'absolute',\n      top: yOffset\n    }, _defineProperty(_ref4, I18nManager.isRTL ? 'right' : 'left', xOffset), _defineProperty(_ref4, \"backgroundColor\", highlightColor), _defineProperty(_ref4, \"overflow\", 'visible'), _defineProperty(_ref4, \"width\", elementWidth), _defineProperty(_ref4, \"height\", elementHeight), _ref4;\n  }, [dimensions, highlightColor]);\n\n  var HighlightedButton = function HighlightedButton() {\n    if (closeOnlyOnBackdropPress) {\n      return _jsx(Pressable, {\n        testID: \"tooltipTouchableHighlightedButton\",\n        onPress: handleOnPress,\n        style: TooltipHighlightedButtonStyle,\n        children: props.children\n      });\n    } else {\n      return _jsx(View, {\n        style: TooltipHighlightedButtonStyle,\n        children: props.children\n      });\n    }\n  };\n\n  React.useEffect(function () {\n    isMounted.current = true;\n    requestAnimationFrame(getElementPosition);\n    Dimensions.addEventListener('change', getElementPosition);\n    return function () {\n      isMounted.current = false;\n      Dimensions.removeEventListener('change', getElementPosition);\n    };\n  }, [getElementPosition]);\n  var tooltipStyle = React.useMemo(function () {\n    return getTooltipStyle(_objectSpread(_objectSpread({}, dimensions), {}, {\n      backgroundColor: backgroundColor,\n      containerStyle: containerStyle,\n      height: height,\n      width: width,\n      withPointer: withPointer\n    }));\n  }, [backgroundColor, containerStyle, dimensions, height, width, withPointer]);\n  return _jsxs(View, {\n    collapsable: false,\n    ref: renderedElement,\n    children: [_jsx(Pressable, _objectSpread(_objectSpread({}, _defineProperty({}, toggleAction, handleOnPress)), {}, {\n      delayLongPress: 250,\n      children: props.children\n    })), _jsx(ModalComponent, {\n      transparent: true,\n      visible: visible,\n      onShow: onOpen,\n      animationType: \"fade\",\n      children: _jsx(TouchableOpacity, {\n        style: {\n          backgroundColor: withOverlay ? overlayColor : 'transparent',\n          flex: 1\n        },\n        onPress: handleOnPress,\n        activeOpacity: 1,\n        children: _jsxs(View, {\n          children: [_jsx(HighlightedButton, {}), _jsx(Pointer, {\n            tooltipY: tooltipStyle.top\n          }), _jsx(View, {\n            style: tooltipStyle,\n            testID: \"tooltipPopoverContainer\",\n            children: props.popover\n          })]\n        })\n      })\n    })]\n  });\n};\nTooltip.displayName = 'Tooltip';","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/base/dist/Tooltip/Tooltip.js"],"names":["React","Triangle","ScreenWidth","isIOS","getElementVisibleWidth","getTooltipStyle","Tooltip","withOverlay","overlayColor","highlightColor","withPointer","toggleOnPress","toggleAction","height","width","containerStyle","backgroundColor","pointerColor","pointerStyle","onClose","onOpen","visible","skipAndroidStatusBar","ModalComponent","Modal","closeOnlyOnBackdropPress","props","isMounted","useRef","renderedElement","useState","yOffset","xOffset","elementWidth","elementHeight","dimensions","setDimensions","getElementPosition","useCallback","current","measure","_frameOffsetX","_frameOffsetY","_width","_height","pageOffsetX","pageOffsetY","Platform","select","android","StatusBar","currentHeight","ios","default","handleOnPress","Pointer","tooltipY","pastMiddleLine","position","top","I18nManager","isRTL","TooltipHighlightedButtonStyle","useMemo","HighlightedButton","children","useEffect","requestAnimationFrame","Dimensions","addEventListener","removeEventListener","tooltipStyle","flex","popover","displayName"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;;AAEA,OAAOC,QAAP;AACA,SAASC,WAAT,EAAsBC,KAAtB;AACA,SAASC,sBAAT;AACA,SAASC,eAAT;;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAkb;AAAA,8BAA/aC,WAA+a;AAAA,MAA/aA,WAA+a,iCAAja,IAAia;AAAA,+BAA3ZC,YAA2Z;AAAA,MAA3ZA,YAA2Z,kCAA5Y,WAA4Y;AAAA,iCAA/XC,cAA+X;AAAA,MAA/XA,cAA+X,oCAA9W,aAA8W;AAAA,8BAA/VC,WAA+V;AAAA,MAA/VA,WAA+V,iCAAjV,IAAiV;AAAA,gCAA3UC,aAA2U;AAAA,MAA3UA,aAA2U,mCAA3T,IAA2T;AAAA,+BAArTC,YAAqT;AAAA,MAArTA,YAAqT,kCAAtS,SAAsS;AAAA,yBAA3RC,MAA2R;AAAA,MAA3RA,MAA2R,4BAAlR,EAAkR;AAAA,wBAA9QC,KAA8Q;AAAA,MAA9QA,KAA8Q,2BAAtQ,GAAsQ;AAAA,iCAAjQC,cAAiQ;AAAA,MAAjQA,cAAiQ,oCAAhP,EAAgP;AAAA,kCAA5OC,eAA4O;AAAA,MAA5OA,eAA4O,qCAA1N,SAA0N;AAAA,+BAA/MC,YAA+M;AAAA,MAA/MA,YAA+M,kCAAhMD,eAAgM;AAAA,MAA/KE,YAA+K,QAA/KA,YAA+K;AAAA,0BAAjKC,OAAiK;AAAA,MAAjKA,OAAiK,6BAAvJ,YAAM,CAAG,CAA8I;AAAA,yBAA5IC,MAA4I;AAAA,MAA5IA,MAA4I,4BAAnI,YAAM,CAAG,CAA0H;AAAA,0BAAxHC,OAAwH;AAAA,MAAxHA,OAAwH,6BAA9G,KAA8G;AAAA,mCAAvGC,oBAAuG;AAAA,MAAvGA,oBAAuG,sCAAhF,KAAgF;AAAA,iCAAzEC,cAAyE;AAAA,MAAzEA,cAAyE,oCAAxDC,KAAwD;AAAA,mCAAjDC,wBAAiD;AAAA,MAAjDA,wBAAiD,sCAAtB,KAAsB;AAAA,MAAZC,KAAY;;AACrc,MAAMC,SAAS,GAAG3B,KAAK,CAAC4B,MAAN,CAAa,KAAb,CAAlB;AACA,MAAMC,eAAe,GAAG7B,KAAK,CAAC4B,MAAN,CAAa,IAAb,CAAxB;;AACA,wBAAoC5B,KAAK,CAAC8B,QAAN,CAAe;AAC/CC,IAAAA,OAAO,EAAE,CADsC;AAE/CC,IAAAA,OAAO,EAAE,CAFsC;AAG/CC,IAAAA,YAAY,EAAE,CAHiC;AAI/CC,IAAAA,aAAa,EAAE;AAJgC,GAAf,CAApC;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AAMA,MAAMC,kBAAkB,GAAGrC,KAAK,CAACsC,WAAN,CAAkB,YAAM;AAC/CT,IAAAA,eAAe,CAACU,OAAhB,IACIV,eAAe,CAACU,OAAhB,CAAwBC,OAAxB,CAAgC,UAACC,aAAD,EAAgBC,aAAhB,EAA+BC,MAA/B,EAAuCC,OAAvC,EAAgDC,WAAhD,EAA6DC,WAA7D,EAA6E;AACzGnB,MAAAA,SAAS,CAACY,OAAV,IACIH,aAAa,CAAC;AACVJ,QAAAA,OAAO,EAAEa,WADC;AAEVd,QAAAA,OAAO,EAAE5B,KAAK,IAAImB,oBAAT,GACHwB,WADG,GAEHA,WAAW,GACTC,QAAQ,CAACC,MAAT,CAAgB;AACZC,UAAAA,OAAO,EAAEC,SAAS,CAACC,aADP;AAEZC,UAAAA,GAAG,EAAE,EAFO;AAGZC,UAAAA,OAAO,EAAE;AAHG,SAAhB,CALE;AAUVpB,QAAAA,YAAY,EAAEU,MAVJ;AAWVT,QAAAA,aAAa,EAAEU;AAXL,OAAD,CADjB;AAcH,KAfD,CADJ;AAiBH,GAlB0B,EAkBxB,CAACtB,oBAAD,CAlBwB,CAA3B;AAmBA,MAAMgC,aAAa,GAAGtD,KAAK,CAACsC,WAAN,CAAkB,YAAM;AAC1CD,IAAAA,kBAAkB;AAClBV,IAAAA,SAAS,CAACY,OAAV,IAAqB5B,aAArB,KAAuCU,OAAO,GAAGF,OAAH,oBAAGA,OAAO,EAAV,GAAiBC,MAAjB,oBAAiBA,MAAM,EAArE;AACH,GAHqB,EAGnB,CAACiB,kBAAD,EAAqBlB,OAArB,EAA8BC,MAA9B,EAAsCT,aAAtC,EAAqDU,OAArD,CAHmB,CAAtB;;AAIA,MAAMkC,OAAO,GAAG,SAAVA,OAAU,QAAkB;AAAA,QAAfC,QAAe,SAAfA,QAAe;AAC9B,QAAQzB,OAAR,GAA0DI,UAA1D,CAAQJ,OAAR;AAAA,QAAiBC,OAAjB,GAA0DG,UAA1D,CAAiBH,OAAjB;AAAA,QAA0BE,aAA1B,GAA0DC,UAA1D,CAA0BD,aAA1B;AAAA,QAAyCD,YAAzC,GAA0DE,UAA1D,CAAyCF,YAAzC;AACA,QAAMwB,cAAc,GAAG1B,OAAO,IAAIyB,QAAQ,IAAI,CAAhB,CAA9B;;AACA,QAAI,CAAC9C,WAAL,EAAkB;AACd,aAAO,IAAP;AACH;;AACD,WAAQ,KAAC,IAAD;AAAM,MAAA,KAAK;AACXgD,QAAAA,QAAQ,EAAE,UADC;AAEXC,QAAAA,GAAG,EAAEF,cAAc,GAAG1B,OAAO,GAAG,EAAb,GAAkBA,OAAO,GAAGG,aAAV,GAA0B;AAFpD,SAGV0B,WAAW,CAACC,KAAZ,GAAoB,OAApB,GAA8B,MAHpB,EAG6B7B,OAAO,GAC3C5B,sBAAsB,CAAC6B,YAAD,EAAeD,OAAf,EAAwB9B,WAAxB,CAAtB,GAA6D,CADzB,GAEpC,GALO,CAAX;AAAA,gBAOR,KAAC,QAAD;AAAU,QAAA,KAAK,EAAEgB,YAAjB;AAA+B,QAAA,YAAY,EAAED,YAA7C;AAA2D,QAAA,MAAM,EAAEwC;AAAnE;AAPQ,MAAR;AASH,GAfD;;AAgBA,MAAMK,6BAA6B,GAAG9D,KAAK,CAAC+D,OAAN,CAAc,YAAM;AAAA;;AACtD,QAAQhC,OAAR,GAA0DI,UAA1D,CAAQJ,OAAR;AAAA,QAAiBC,OAAjB,GAA0DG,UAA1D,CAAiBH,OAAjB;AAAA,QAA0BC,YAA1B,GAA0DE,UAA1D,CAA0BF,YAA1B;AAAA,QAAwCC,aAAxC,GAA0DC,UAA1D,CAAwCD,aAAxC;AACA;AACIwB,MAAAA,QAAQ,EAAE,UADd;AAEIC,MAAAA,GAAG,EAAE5B;AAFT,8BAGK6B,WAAW,CAACC,KAAZ,GAAoB,OAApB,GAA8B,MAHnC,EAG4C7B,OAH5C,6CAIqBvB,cAJrB,sCAKc,SALd,mCAMWwB,YANX,oCAOYC,aAPZ;AASH,GAXqC,EAWnC,CAACC,UAAD,EAAa1B,cAAb,CAXmC,CAAtC;;AAYA,MAAMuD,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B,QAAIvC,wBAAJ,EAA8B;AAC1B,aAAQ,KAAC,SAAD;AAAW,QAAA,MAAM,EAAC,mCAAlB;AAAsD,QAAA,OAAO,EAAE6B,aAA/D;AAA8E,QAAA,KAAK,EAAEQ,6BAArF;AAAA,kBACTpC,KAAK,CAACuC;AADG,QAAR;AAGH,KAJD,MAKK;AACD,aAAQ,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,6BAAb;AAAA,kBAA6CpC,KAAK,CAACuC;AAAnD,QAAR;AACH;AACJ,GATD;;AAUAjE,EAAAA,KAAK,CAACkE,SAAN,CAAgB,YAAM;AAClBvC,IAAAA,SAAS,CAACY,OAAV,GAAoB,IAApB;AACA4B,IAAAA,qBAAqB,CAAC9B,kBAAD,CAArB;AACA+B,IAAAA,UAAU,CAACC,gBAAX,CAA4B,QAA5B,EAAsChC,kBAAtC;AACA,WAAO,YAAM;AACTV,MAAAA,SAAS,CAACY,OAAV,GAAoB,KAApB;AACA6B,MAAAA,UAAU,CAACE,mBAAX,CAA+B,QAA/B,EAAyCjC,kBAAzC;AACH,KAHD;AAIH,GARD,EAQG,CAACA,kBAAD,CARH;AASA,MAAMkC,YAAY,GAAGvE,KAAK,CAAC+D,OAAN,CAAc;AAAA,WAAM1D,eAAe,iCACjD8B,UADiD;AAEpDnB,MAAAA,eAAe,EAAfA,eAFoD;AAGpDD,MAAAA,cAAc,EAAdA,cAHoD;AAIpDF,MAAAA,MAAM,EAANA,MAJoD;AAKpDC,MAAAA,KAAK,EAALA,KALoD;AAMpDJ,MAAAA,WAAW,EAAXA;AANoD,OAArB;AAAA,GAAd,EAOjB,CAACM,eAAD,EAAkBD,cAAlB,EAAkCoB,UAAlC,EAA8CtB,MAA9C,EAAsDC,KAAtD,EAA6DJ,WAA7D,CAPiB,CAArB;AAQA,SAAQ,MAAC,IAAD;AAAM,IAAA,WAAW,EAAE,KAAnB;AAA0B,IAAA,GAAG,EAAEmB,eAA/B;AAAA,eACN,KAAC,SAAD,sDAAkBjB,YAAlB,EAAiC0C,aAAjC;AAAkD,MAAA,cAAc,EAAE,GAAlE;AAAA,gBACG5B,KAAK,CAACuC;AADT,OADM,EAIN,KAAC,cAAD;AAAgB,MAAA,WAAW,MAA3B;AAA4B,MAAA,OAAO,EAAE5C,OAArC;AAA8C,MAAA,MAAM,EAAED,MAAtD;AAA8D,MAAA,aAAa,EAAC,MAA5E;AAAA,gBACE,KAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE;AACrBJ,UAAAA,eAAe,EAAET,WAAW,GAAGC,YAAH,GAAkB,aADzB;AAErBgE,UAAAA,IAAI,EAAE;AAFe,SAAzB;AAGG,QAAA,OAAO,EAAElB,aAHZ;AAG2B,QAAA,aAAa,EAAE,CAH1C;AAAA,kBAIE,MAAC,IAAD;AAAA,qBACE,KAAC,iBAAD,KADF,EAEE,KAAC,OAAD;AAAS,YAAA,QAAQ,EAAEiB,YAAY,CAACZ;AAAhC,YAFF,EAGE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEY,YAAb;AAA2B,YAAA,MAAM,EAAC,yBAAlC;AAAA,sBACG7C,KAAK,CAAC+C;AADT,YAHF;AAAA;AAJF;AADF,MAJM;AAAA,IAAR;AAmBH,CA1GM;AA2GPnE,OAAO,CAACoE,WAAR,GAAsB,SAAtB","sourcesContent":["import React from 'react';\nimport { TouchableOpacity, Modal, View, StatusBar, I18nManager, Platform, Dimensions, Pressable, } from 'react-native';\nimport Triangle from './components/Triangle';\nimport { ScreenWidth, isIOS } from '../helpers';\nimport { getElementVisibleWidth } from './helpers/getTooltipCoordinate';\nimport { getTooltipStyle } from './helpers/getTooltipStyle';\nexport const Tooltip = ({ withOverlay = true, overlayColor = '#fafafa14', highlightColor = 'transparent', withPointer = true, toggleOnPress = true, toggleAction = 'onPress', height = 40, width = 150, containerStyle = {}, backgroundColor = '#617080', pointerColor = backgroundColor, pointerStyle, onClose = () => { }, onOpen = () => { }, visible = false, skipAndroidStatusBar = false, ModalComponent = Modal, closeOnlyOnBackdropPress = false, ...props }) => {\n    const isMounted = React.useRef(false);\n    const renderedElement = React.useRef(null);\n    const [dimensions, setDimensions] = React.useState({\n        yOffset: 0,\n        xOffset: 0,\n        elementWidth: 0,\n        elementHeight: 0,\n    });\n    const getElementPosition = React.useCallback(() => {\n        renderedElement.current &&\n            renderedElement.current.measure((_frameOffsetX, _frameOffsetY, _width, _height, pageOffsetX, pageOffsetY) => {\n                isMounted.current &&\n                    setDimensions({\n                        xOffset: pageOffsetX,\n                        yOffset: isIOS || skipAndroidStatusBar\n                            ? pageOffsetY\n                            : pageOffsetY -\n                                Platform.select({\n                                    android: StatusBar.currentHeight,\n                                    ios: 20,\n                                    default: 0,\n                                }),\n                        elementWidth: _width,\n                        elementHeight: _height,\n                    });\n            });\n    }, [skipAndroidStatusBar]);\n    const handleOnPress = React.useCallback(() => {\n        getElementPosition();\n        isMounted.current && toggleOnPress && (visible ? onClose?.() : onOpen?.());\n    }, [getElementPosition, onClose, onOpen, toggleOnPress, visible]);\n    const Pointer = ({ tooltipY }) => {\n        const { yOffset, xOffset, elementHeight, elementWidth } = dimensions;\n        const pastMiddleLine = yOffset > (tooltipY || 0);\n        if (!withPointer) {\n            return null;\n        }\n        return (<View style={{\n                position: 'absolute',\n                top: pastMiddleLine ? yOffset - 13 : yOffset + elementHeight - 2,\n                [I18nManager.isRTL ? 'right' : 'left']: xOffset +\n                    getElementVisibleWidth(elementWidth, xOffset, ScreenWidth) / 2 -\n                    7.5,\n            }}>\n        <Triangle style={pointerStyle} pointerColor={pointerColor} isDown={pastMiddleLine}/>\n      </View>);\n    };\n    const TooltipHighlightedButtonStyle = React.useMemo(() => {\n        const { yOffset, xOffset, elementWidth, elementHeight } = dimensions;\n        return {\n            position: 'absolute',\n            top: yOffset,\n            [I18nManager.isRTL ? 'right' : 'left']: xOffset,\n            backgroundColor: highlightColor,\n            overflow: 'visible',\n            width: elementWidth,\n            height: elementHeight,\n        };\n    }, [dimensions, highlightColor]);\n    const HighlightedButton = () => {\n        if (closeOnlyOnBackdropPress) {\n            return (<Pressable testID=\"tooltipTouchableHighlightedButton\" onPress={handleOnPress} style={TooltipHighlightedButtonStyle}>\n          {props.children}\n        </Pressable>);\n        }\n        else {\n            return (<View style={TooltipHighlightedButtonStyle}>{props.children}</View>);\n        }\n    };\n    React.useEffect(() => {\n        isMounted.current = true;\n        requestAnimationFrame(getElementPosition);\n        Dimensions.addEventListener('change', getElementPosition);\n        return () => {\n            isMounted.current = false;\n            Dimensions.removeEventListener('change', getElementPosition);\n        };\n    }, [getElementPosition]);\n    const tooltipStyle = React.useMemo(() => getTooltipStyle({\n        ...dimensions,\n        backgroundColor,\n        containerStyle,\n        height,\n        width,\n        withPointer,\n    }), [backgroundColor, containerStyle, dimensions, height, width, withPointer]);\n    return (<View collapsable={false} ref={renderedElement}>\n      <Pressable {...{ [toggleAction]: handleOnPress }} delayLongPress={250}>\n        {props.children}\n      </Pressable>\n      <ModalComponent transparent visible={visible} onShow={onOpen} animationType=\"fade\">\n        <TouchableOpacity style={{\n            backgroundColor: withOverlay ? overlayColor : 'transparent',\n            flex: 1,\n        }} onPress={handleOnPress} activeOpacity={1}>\n          <View>\n            <HighlightedButton />\n            <Pointer tooltipY={tooltipStyle.top}/>\n            <View style={tooltipStyle} testID=\"tooltipPopoverContainer\">\n              {props.popover}\n            </View>\n          </View>\n        </TouchableOpacity>\n      </ModalComponent>\n    </View>);\n};\nTooltip.displayName = 'Tooltip';\n"]},"metadata":{},"sourceType":"module"}