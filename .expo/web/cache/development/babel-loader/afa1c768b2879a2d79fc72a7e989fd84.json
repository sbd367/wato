{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"checked\", \"Component\", \"iconRight\", \"title\", \"titleProps\", \"center\", \"right\", \"containerStyle\", \"wrapperStyle\", \"textStyle\", \"checkedTitle\", \"fontFamily\", \"theme\", \"onPress\", \"onLongPress\", \"checkedColor\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Text as TextElement } from \"../Text\";\nimport { CheckBoxIcon } from \"./components/CheckBoxIcon\";\nimport { fonts } from \"../helpers/index-config\";\nimport { defaultTheme } from \"../helpers\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var CheckBox = function CheckBox(_ref) {\n  var _theme$colors, _theme$colors2;\n\n  var _ref$checked = _ref.checked,\n      checked = _ref$checked === void 0 ? false : _ref$checked,\n      _ref$Component = _ref.Component,\n      Component = _ref$Component === void 0 ? Pressable : _ref$Component,\n      _ref$iconRight = _ref.iconRight,\n      iconRight = _ref$iconRight === void 0 ? false : _ref$iconRight,\n      title = _ref.title,\n      _ref$titleProps = _ref.titleProps,\n      titleProps = _ref$titleProps === void 0 ? {} : _ref$titleProps,\n      _ref$center = _ref.center,\n      center = _ref$center === void 0 ? false : _ref$center,\n      _ref$right = _ref.right,\n      right = _ref$right === void 0 ? false : _ref$right,\n      containerStyle = _ref.containerStyle,\n      wrapperStyle = _ref.wrapperStyle,\n      textStyle = _ref.textStyle,\n      checkedTitle = _ref.checkedTitle,\n      fontFamily = _ref.fontFamily,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      _ref$checkedColor = _ref.checkedColor,\n      checkedColor = _ref$checkedColor === void 0 ? theme == null ? void 0 : (_theme$colors = theme.colors) == null ? void 0 : _theme$colors.primary : _ref$checkedColor,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var accessibilityState = {\n    checked: !!checked\n  };\n\n  var iconProps = _objectSpread({\n    checked: checked,\n    onLongPress: onLongPress,\n    checkedColor: checkedColor\n  }, rest);\n\n  return _jsx(Component, _objectSpread(_objectSpread({\n    accessibilityRole: \"checkbox\",\n    accessibilityState: accessibilityState,\n    testID: \"RNE__CheckBox__Wrapper\"\n  }, rest), {}, {\n    onLongPress: onLongPress,\n    onPress: onPress,\n    style: StyleSheet.flatten([{\n      backgroundColor: theme.colors.white,\n      borderColor: theme.colors.white\n    }, styles.container, containerStyle && containerStyle]),\n    children: _jsxs(View, {\n      style: StyleSheet.flatten([styles.wrapper, right && {\n        justifyContent: 'flex-end'\n      }, center && {\n        justifyContent: 'center'\n      }, wrapperStyle && wrapperStyle]),\n      children: [!iconRight && _jsx(CheckBoxIcon, _objectSpread(_objectSpread({}, iconProps), {}, {\n        checkedColor: checkedColor\n      })), React.isValidElement(title) ? title : title !== '' && title && _jsx(TextElement, _objectSpread(_objectSpread({\n        testID: \"RNE__CheckBox__Title\",\n        style: StyleSheet.flatten([_objectSpread({\n          marginLeft: 10,\n          marginRight: 10,\n          color: theme == null ? void 0 : (_theme$colors2 = theme.colors) == null ? void 0 : _theme$colors2.grey1\n        }, Platform.select({\n          android: _objectSpread({}, fonts.android.bold),\n          default: {\n            fontWeight: 'bold'\n          }\n        })), textStyle && textStyle, fontFamily && {\n          fontFamily: fontFamily\n        }])\n      }, titleProps), {}, {\n        children: checked ? checkedTitle || title : title\n      })), iconRight && _jsx(CheckBoxIcon, _objectSpread(_objectSpread({}, iconProps), {}, {\n        checkedColor: checkedColor\n      }))]\n    })\n  }));\n};\nvar styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  container: {\n    margin: 5,\n    marginLeft: 10,\n    marginRight: 10,\n    padding: 10\n  },\n  containerHasTitle: {\n    borderWidth: 1,\n    borderRadius: 3,\n    backgroundColor: '#fafafa',\n    borderColor: '#ededed'\n  }\n});\nCheckBox.displayName = 'CheckBox';","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/base/dist/CheckBox/CheckBox.js"],"names":["React","Text","TextElement","CheckBoxIcon","fonts","defaultTheme","CheckBox","checked","Component","Pressable","iconRight","title","titleProps","center","right","containerStyle","wrapperStyle","textStyle","checkedTitle","fontFamily","theme","onPress","onLongPress","checkedColor","colors","primary","rest","accessibilityState","iconProps","StyleSheet","flatten","backgroundColor","white","borderColor","styles","container","wrapper","justifyContent","isValidElement","marginLeft","marginRight","color","grey1","Platform","select","android","bold","default","fontWeight","create","flexDirection","alignItems","margin","padding","containerHasTitle","borderWidth","borderRadius","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Pressable, View, Platform, } from 'react-native';\nimport { Text as TextElement } from '../Text';\nimport { CheckBoxIcon } from './components/CheckBoxIcon';\nimport { fonts } from '../helpers/index-config';\nimport { defaultTheme } from '../helpers';\nexport const CheckBox = ({ checked = false, Component = Pressable, iconRight = false, title, titleProps = {}, center = false, right = false, containerStyle, wrapperStyle, textStyle, checkedTitle, fontFamily, theme = defaultTheme, onPress, onLongPress, checkedColor = theme?.colors?.primary, ...rest }) => {\n    const accessibilityState = {\n        checked: !!checked,\n    };\n    const iconProps = {\n        checked,\n        onLongPress,\n        checkedColor,\n        ...rest,\n    };\n    return (<Component accessibilityRole=\"checkbox\" accessibilityState={accessibilityState} testID=\"RNE__CheckBox__Wrapper\" {...rest} onLongPress={onLongPress} onPress={onPress} style={StyleSheet.flatten([\n            {\n                backgroundColor: theme.colors.white,\n                borderColor: theme.colors.white,\n            },\n            styles.container,\n            containerStyle && containerStyle,\n        ])}>\n      <View style={StyleSheet.flatten([\n            styles.wrapper,\n            right && { justifyContent: 'flex-end' },\n            center && { justifyContent: 'center' },\n            wrapperStyle && wrapperStyle,\n        ])}>\n        \n        {!iconRight && (<CheckBoxIcon {...iconProps} checkedColor={checkedColor}/>)}\n        {React.isValidElement(title)\n            ? title\n            : title !== '' &&\n                title && (<TextElement testID=\"RNE__CheckBox__Title\" style={StyleSheet.flatten([\n                    {\n                        marginLeft: 10,\n                        marginRight: 10,\n                        color: theme?.colors?.grey1,\n                        ...Platform.select({\n                            android: {\n                                ...fonts.android.bold,\n                            },\n                            default: {\n                                fontWeight: 'bold',\n                            },\n                        }),\n                    },\n                    textStyle && textStyle,\n                    fontFamily && { fontFamily },\n                ])} {...titleProps}>\n                {checked ? checkedTitle || title : title}\n              </TextElement>)}\n        \n        {iconRight && (<CheckBoxIcon {...iconProps} checkedColor={checkedColor}/>)}\n      </View>\n    </Component>);\n};\nconst styles = StyleSheet.create({\n    wrapper: {\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    container: {\n        margin: 5,\n        marginLeft: 10,\n        marginRight: 10,\n        padding: 10,\n    },\n    containerHasTitle: {\n        borderWidth: 1,\n        borderRadius: 3,\n        backgroundColor: '#fafafa',\n        borderColor: '#ededed',\n    },\n});\nCheckBox.displayName = 'CheckBox';\n"]},"metadata":{},"sourceType":"module"}