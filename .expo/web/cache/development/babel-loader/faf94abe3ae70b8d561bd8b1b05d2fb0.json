{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"darkColors\", \"colors\", \"mode\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport deepmerge from 'deepmerge';\nimport { colors, darkColors } from \"./colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var ThemeContext = React.createContext({\n  theme: {\n    colors: colors\n  }\n});\nexport var createTheme = function createTheme(theme) {\n  return deepmerge({\n    colors: colors,\n    darkColors: darkColors,\n    mode: 'light'\n  }, theme);\n};\n\nvar separateColors = function separateColors(theme, themeMode) {\n  var _theme$darkColors = theme.darkColors,\n      themeDarkColors = _theme$darkColors === void 0 ? {} : _theme$darkColors,\n      _theme$colors = theme.colors,\n      themeLightColors = _theme$colors === void 0 ? {} : _theme$colors,\n      _theme$mode = theme.mode,\n      mode = _theme$mode === void 0 ? themeMode : _theme$mode,\n      restTheme = _objectWithoutProperties(theme, _excluded);\n\n  var themeColors = mode === 'dark' ? themeDarkColors : themeLightColors;\n  return _objectSpread({\n    colors: themeColors,\n    mode: mode\n  }, restTheme);\n};\n\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? {} : _ref$theme,\n      children = _ref.children;\n\n  var _React$useState = React.useState(createTheme(theme)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      themeState = _React$useState2[0],\n      setThemeState = _React$useState2[1];\n\n  var updateTheme = React.useCallback(function (updatedTheme) {\n    setThemeState(function (oldTheme) {\n      var newTheme = typeof updatedTheme === 'function' ? updatedTheme(oldTheme) : updatedTheme;\n      return deepmerge(_objectSpread({}, oldTheme), newTheme);\n    });\n  }, []);\n  var replaceTheme = React.useCallback(function (replacedTheme) {\n    setThemeState(function (oldTheme) {\n      var newTheme = typeof replacedTheme === 'function' ? replacedTheme(oldTheme) : replacedTheme;\n      return deepmerge(createTheme({}), newTheme);\n    });\n  }, []);\n  return _jsx(ThemeContext.Provider, {\n    value: {\n      theme: separateColors(themeState),\n      updateTheme: updateTheme,\n      replaceTheme: replaceTheme\n    },\n    children: children\n  });\n};\nexport var ThemeConsumer = ThemeContext.Consumer;","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/themed/dist/config/ThemeProvider.js"],"names":["React","deepmerge","colors","darkColors","ThemeContext","createContext","theme","createTheme","mode","separateColors","themeMode","themeDarkColors","themeLightColors","restTheme","themeColors","ThemeProvider","children","useState","themeState","setThemeState","updateTheme","useCallback","updatedTheme","oldTheme","newTheme","replaceTheme","replacedTheme","ThemeConsumer","Consumer"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,MAAT,EAAiBC,UAAjB;;AACA,OAAO,IAAMC,YAAY,GAAGJ,KAAK,CAACK,aAAN,CAAoB;AAC5CC,EAAAA,KAAK,EAAE;AACHJ,IAAAA,MAAM,EAANA;AADG;AADqC,CAApB,CAArB;AAKP,OAAO,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAACD,KAAD,EAAW;AAClC,SAAOL,SAAS,CAAC;AAAEC,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,UAAU,EAAVA,UAAV;AAAsBK,IAAAA,IAAI,EAAE;AAA5B,GAAD,EAAwCF,KAAxC,CAAhB;AACH,CAFM;;AAGP,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACH,KAAD,EAAQI,SAAR,EAAsB;AACzC,0BAA4GJ,KAA5G,CAAQH,UAAR;AAAA,MAAoBQ,eAApB,kCAAsC,EAAtC;AAAA,sBAA4GL,KAA5G,CAA0CJ,MAA1C;AAAA,MAAkDU,gBAAlD,8BAAqE,EAArE;AAAA,oBAA4GN,KAA5G,CAAyEE,IAAzE;AAAA,MAAyEA,IAAzE,4BAAgFE,SAAhF;AAAA,MAA8FG,SAA9F,4BAA4GP,KAA5G;;AACA,MAAMQ,WAAW,GAAGN,IAAI,KAAK,MAAT,GAAkBG,eAAlB,GAAoCC,gBAAxD;AACA;AAASV,IAAAA,MAAM,EAAEY,WAAjB;AAA8BN,IAAAA,IAAI,EAAJA;AAA9B,KAAuCK,SAAvC;AACH,CAJD;;AAKA,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,OAA8B;AAAA,wBAA3BT,KAA2B;AAAA,MAA3BA,KAA2B,2BAAnB,EAAmB;AAAA,MAAfU,QAAe,QAAfA,QAAe;;AACvD,wBAAoChB,KAAK,CAACiB,QAAN,CAAeV,WAAW,CAACD,KAAD,CAA1B,CAApC;AAAA;AAAA,MAAOY,UAAP;AAAA,MAAmBC,aAAnB;;AACA,MAAMC,WAAW,GAAGpB,KAAK,CAACqB,WAAN,CAAkB,UAACC,YAAD,EAAkB;AACpDH,IAAAA,aAAa,CAAC,UAACI,QAAD,EAAc;AACxB,UAAMC,QAAQ,GAAG,OAAOF,YAAP,KAAwB,UAAxB,GACXA,YAAY,CAACC,QAAD,CADD,GAEXD,YAFN;AAGA,aAAOrB,SAAS,mBAAMsB,QAAN,GAAkBC,QAAlB,CAAhB;AACH,KALY,CAAb;AAMH,GAPmB,EAOjB,EAPiB,CAApB;AAQA,MAAMC,YAAY,GAAGzB,KAAK,CAACqB,WAAN,CAAkB,UAACK,aAAD,EAAmB;AACtDP,IAAAA,aAAa,CAAC,UAACI,QAAD,EAAc;AACxB,UAAMC,QAAQ,GAAG,OAAOE,aAAP,KAAyB,UAAzB,GACXA,aAAa,CAACH,QAAD,CADF,GAEXG,aAFN;AAGA,aAAOzB,SAAS,CAACM,WAAW,CAAC,EAAD,CAAZ,EAAkBiB,QAAlB,CAAhB;AACH,KALY,CAAb;AAMH,GAPoB,EAOlB,EAPkB,CAArB;AAQA,SAAQ,KAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAC9BlB,MAAAA,KAAK,EAAEG,cAAc,CAACS,UAAD,CADS;AAE9BE,MAAAA,WAAW,EAAXA,WAF8B;AAG9BK,MAAAA,YAAY,EAAZA;AAH8B,KAA9B;AAAA,cAKLT;AALK,IAAR;AAOH,CAzBM;AA0BP,OAAO,IAAMW,aAAa,GAAGvB,YAAY,CAACwB,QAAnC","sourcesContent":["import React from 'react';\nimport deepmerge from 'deepmerge';\nimport { colors, darkColors } from './colors';\nexport const ThemeContext = React.createContext({\n    theme: {\n        colors,\n    },\n});\nexport const createTheme = (theme) => {\n    return deepmerge({ colors, darkColors, mode: 'light' }, theme);\n};\nconst separateColors = (theme, themeMode) => {\n    const { darkColors: themeDarkColors = {}, colors: themeLightColors = {}, mode = themeMode, ...restTheme } = theme;\n    const themeColors = mode === 'dark' ? themeDarkColors : themeLightColors;\n    return { colors: themeColors, mode, ...restTheme };\n};\nexport const ThemeProvider = ({ theme = {}, children }) => {\n    const [themeState, setThemeState] = React.useState(createTheme(theme));\n    const updateTheme = React.useCallback((updatedTheme) => {\n        setThemeState((oldTheme) => {\n            const newTheme = typeof updatedTheme === 'function'\n                ? updatedTheme(oldTheme)\n                : updatedTheme;\n            return deepmerge({ ...oldTheme }, newTheme);\n        });\n    }, []);\n    const replaceTheme = React.useCallback((replacedTheme) => {\n        setThemeState((oldTheme) => {\n            const newTheme = typeof replacedTheme === 'function'\n                ? replacedTheme(oldTheme)\n                : replacedTheme;\n            return deepmerge(createTheme({}), newTheme);\n        });\n    }, []);\n    return (<ThemeContext.Provider value={{\n            theme: separateColors(themeState),\n            updateTheme,\n            replaceTheme,\n        }}>\n      {children}\n    </ThemeContext.Provider>);\n};\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]},"metadata":{},"sourceType":"module"}