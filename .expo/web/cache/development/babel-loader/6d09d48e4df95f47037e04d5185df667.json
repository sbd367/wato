{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"containerStyle\", \"textStyle\", \"textProps\", \"badgeStyle\", \"onPress\", \"onLongPress\", \"onPressOut\", \"onPressIn\", \"Component\", \"value\", \"theme\", \"status\", \"pressableProps\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { defaultTheme, renderNode } from \"../helpers\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var Badge = function Badge(_ref) {\n  var _theme$colors;\n\n  var containerStyle = _ref.containerStyle,\n      textStyle = _ref.textStyle,\n      textProps = _ref.textProps,\n      badgeStyle = _ref.badgeStyle,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      onPressOut = _ref.onPressOut,\n      onPressIn = _ref.onPressIn,\n      _ref$Component = _ref.Component,\n      Component = _ref$Component === void 0 ? onPress || onLongPress || onPressIn || onPressOut ? Pressable : View : _ref$Component,\n      value = _ref.value,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n      _ref$status = _ref.status,\n      status = _ref$status === void 0 ? 'primary' : _ref$status,\n      pressableProps = _ref.pressableProps,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var element = renderNode(Text, value, _objectSpread({\n    style: StyleSheet.flatten([styles.text, textStyle && textStyle])\n  }, textProps));\n  return _jsx(View, {\n    testID: \"RNE__Badge__Container\",\n    style: StyleSheet.flatten([containerStyle && containerStyle]),\n    children: _jsx(Component, _objectSpread(_objectSpread({}, _objectSpread(_objectSpread({\n      onPress: onPress,\n      onLongPress: onLongPress,\n      onPressOut: onPressOut,\n      onPressIn: onPressIn\n    }, pressableProps), rest)), {}, {\n      testID: \"RNE__Badge\",\n      style: StyleSheet.flatten([{\n        alignSelf: 'center',\n        minWidth: size,\n        height: size,\n        borderRadius: size / 2,\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: theme == null ? void 0 : (_theme$colors = theme.colors) == null ? void 0 : _theme$colors[status],\n        borderWidth: StyleSheet.hairlineWidth,\n        borderColor: '#fff'\n      }, !element && styles.miniBadge, badgeStyle && badgeStyle]),\n      children: element\n    }))\n  });\n};\nvar size = 18;\nvar miniSize = 8;\nvar styles = StyleSheet.create({\n  miniBadge: {\n    paddingHorizontal: 0,\n    paddingVertical: 0,\n    minWidth: miniSize,\n    height: miniSize,\n    borderRadius: miniSize / 2\n  },\n  text: {\n    fontSize: 12,\n    color: 'white',\n    paddingHorizontal: 4\n  }\n});\nBadge.displayName = 'Badge';","map":{"version":3,"sources":["C:/Users/Spencer/Documents/Code/WATO/wato/node_modules/@react-native-elements/base/dist/Badge/Badge.js"],"names":["React","defaultTheme","renderNode","Badge","containerStyle","textStyle","textProps","badgeStyle","onPress","onLongPress","onPressOut","onPressIn","Component","Pressable","View","value","theme","status","pressableProps","rest","element","Text","style","StyleSheet","flatten","styles","text","alignSelf","minWidth","size","height","borderRadius","alignItems","justifyContent","backgroundColor","colors","borderWidth","hairlineWidth","borderColor","miniBadge","miniSize","create","paddingHorizontal","paddingVertical","fontSize","color","displayName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, Pressable, } from 'react-native';\nimport { defaultTheme, renderNode, } from '../helpers';\nexport const Badge = ({ containerStyle, textStyle, textProps, badgeStyle, onPress, onLongPress, onPressOut, onPressIn, Component = onPress || onLongPress || onPressIn || onPressOut\n    ? Pressable\n    : View, value, theme = defaultTheme, status = 'primary', pressableProps, ...rest }) => {\n    const element = renderNode(Text, value, {\n        style: StyleSheet.flatten([styles.text, textStyle && textStyle]),\n        ...textProps,\n    });\n    return (<View testID=\"RNE__Badge__Container\" style={StyleSheet.flatten([containerStyle && containerStyle])}>\n      <Component {...{\n        onPress,\n        onLongPress,\n        onPressOut,\n        onPressIn,\n        ...pressableProps,\n        ...rest,\n    }} testID=\"RNE__Badge\" style={StyleSheet.flatten([\n            {\n                alignSelf: 'center',\n                minWidth: size,\n                height: size,\n                borderRadius: size / 2,\n                alignItems: 'center',\n                justifyContent: 'center',\n                backgroundColor: theme?.colors?.[status],\n                borderWidth: StyleSheet.hairlineWidth,\n                borderColor: '#fff',\n            },\n            !element && styles.miniBadge,\n            badgeStyle && badgeStyle,\n        ])}>\n        {element}\n      </Component>\n    </View>);\n};\nconst size = 18;\nconst miniSize = 8;\nconst styles = StyleSheet.create({\n    miniBadge: {\n        paddingHorizontal: 0,\n        paddingVertical: 0,\n        minWidth: miniSize,\n        height: miniSize,\n        borderRadius: miniSize / 2,\n    },\n    text: {\n        fontSize: 12,\n        color: 'white',\n        paddingHorizontal: 4,\n    },\n});\nBadge.displayName = 'Badge';\n"]},"metadata":{},"sourceType":"module"}